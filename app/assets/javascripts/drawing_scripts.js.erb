var id = 0;

function setLinePositions(e) {
  var p = e.target;
  var objType = p.get('type');
    if (objType == 'customline') {
      lineobject.setLinePositions(e);
    }

    if (objType == 'customlinearrow') {
        console.log("In customlinearrow")
        var objId = p.get('objId')
        var _curXm = (_curX - e.e.clientX);
        var _curYm = (_curY - e.e.clientY);
        console.log("Deltas: ", _curXm, " ", _curYm)
        for (var i = 0; i < canvas.getObjects().length; i++) {
          var currentObj = canvas.getObjects()[i];
          console.log("currentObj: ", currentObj)
          if (currentObj.type == "carrow" && currentObj.get('belongsTo') == objId) {
            console.log("In carrow", currentObj)
            console.log("currentObj.left: ", currentObj.left)
            console.log("currentObj.top: ", currentObj.top)
            console.log("New currentObj.left: ", (currentObj.left -_curXm))
            console.log("New currentObj.top: ", (currentObj.top - _curYm))
            _c2Top = currentObj.getTop();
            _c2Left = currentObj.getLeft();
            currentObj.set({
              'left': (currentObj.left - _curXm),
              'top': (currentObj.top - _curYm)
            });

            currentObj.setCoords();

            currentObj.line && currentObj.line.set({
                'x2': currentObj.left,
                'y2': currentObj.top
              });

            currentObj.line.setCoords();
          }

          if (currentObj.type == "conearrow" && currentObj.get('belongsTo') == objId) {
            console.log("In conearrow", currentObj)
            _c1Top = currentObj.getTop();
            _c1Left = currentObj.getLeft();
            console.log("New currentObj.left: ", (currentObj.left -_curXm))
            console.log("New currentObj.top: ", (currentObj.top - _curYm))
            currentObj.set({
              'left': (currentObj.left - _curXm) ,
              'top': (currentObj.top - _curYm)
            });

            currentObj.setCoords();

            currentObj.line && currentObj.line.set({
                'x1': currentObj.left,
                'y1': currentObj.top
              });

            currentObj.line.setCoords();
          }


        }
        _curX = e.e.clientX;
        _curY = e.e.clientY;
      }

      if (objType == 'customlinetwoarrow') {
          console.log("In customlinetwoarrow")
          var objId = p.get('objId')
          var _curXm = (_curX - e.e.clientX);
          var _curYm = (_curY - e.e.clientY);
          console.log("Deltas: ", _curXm, " ", _curYm)
          for (var i = 0; i < canvas.getObjects().length; i++) {
            var currentObj = canvas.getObjects()[i];
            console.log("currentObj: ", currentObj)
            if (currentObj.type == "carrowtwo" && currentObj.get('belongsTo') == objId) {
              console.log("In carrowtwo", currentObj)
              console.log("currentObj.left: ", currentObj.left)
              console.log("currentObj.top: ", currentObj.top)
              console.log("New currentObj.left: ", (currentObj.left -_curXm))
              console.log("New currentObj.top: ", (currentObj.top - _curYm))
              _c2Top = currentObj.getTop();
              _c2Left = currentObj.getLeft();
              currentObj.set({
                'left': (currentObj.left - _curXm),
                'top': (currentObj.top - _curYm)
              });

              currentObj.setCoords();

              currentObj.line && currentObj.line.set({
                  'x1': currentObj.left,
                  'y1': currentObj.top
                });

              currentObj.line.setCoords();
            }

            if (currentObj.type == "carrow" && currentObj.get('belongsTo') == objId) {
              console.log("In conearrow", currentObj)
              _c1Top = currentObj.getTop();
              _c1Left = currentObj.getLeft();
              console.log("New currentObj.left: ", (currentObj.left -_curXm))
              console.log("New currentObj.top: ", (currentObj.top - _curYm))
              currentObj.set({
                'left': (currentObj.left - _curXm) ,
                'top': (currentObj.top - _curYm)
              });

              currentObj.setCoords();

              currentObj.line && currentObj.line.set({
                  'x2': currentObj.left,
                  'y2': currentObj.top
                });

              currentObj.line.setCoords();
            }


          }
          _curX = e.e.clientX;
          _curY = e.e.clientY;
        }
}

function setLineCirclePositionsBoundary(e) {
  var p = e.target;
  var objType = p.get('type');
      var objId = p.get('objId')
      var _curXm = (_curX - e.e.clientX);
      var _curYm = (_curY - e.e.clientY);
    if (p.type == "customline") {
        lineobject.setLineCirclePositionsBoundary(e);
    }
    if (p.type == "customlinearrow") {
       _circleOne = p.conearrow;
       _circleTwo = p.carrow;

        _circleTwo && _circleTwo.set({
          'left': _c2Left,
          'top': _c2Top
        });

        _circleTwo.setCoords();

        _circleTwo.line && _circleTwo.line.set({
            'x2': _circleTwo.left,
            'y2': _circleTwo.top
          });

        _circleTwo.line.setCoords();


        _circleOne && _circleOne.set({
          'left': _c1Left,
          'top': _c1Top
        });

        _circleOne.setCoords();
        //setCircleLineAtBoundary(currentObj,p)

        _circleOne.line && _circleOne.line.set({
            'x1': _circleOne.left,
            'y1': _circleOne.top
          });

        _circleOne.line.setCoords();
        p && p.set({ 'x1': _circleOne.left, 'y1': _circleOne.top, 'x2':  _circleTwo.left, 'y2':  _circleTwo.top });

      }

      if (p.type == "customlinetwoarrow") {
         _circleOne = p.carrow;
         _circleTwo = p.carrowtwo;

          _circleTwo && _circleTwo.set({
            'left': _c2Left,
            'top': _c2Top
          });

          _circleTwo.setCoords();

          _circleTwo.line && _circleTwo.line.set({
              'x2': _circleTwo.left,
              'y2': _circleTwo.top
            });

          _circleTwo.line.setCoords();


          _circleOne.line && _circleOne.set({
            'left': _c1Left,
            'top': _c1Top
          });

          _circleOne.setCoords();
          //setCircleLineAtBoundary(currentObj,p)

          _circleOne.line && _circleOne.line.set({
              'x1': _circleOne.left,
              'y1': _circleOne.top
            });

          _circleOne.line.setCoords();
          p && p.set({ 'x1': _circleOne.left, 'y1': _circleOne.top, 'x2':  _circleTwo.left, 'y2':  _circleTwo.top });

        }
      p.setCoords();
      _curX = e.e.clientX;
      _curY = e.e.clientY;

}

function objectBoundaryCheck(e) {
  if (e.target.type == "customline") {
    lineobject.objectBoundaryCheck(e);
  } else {
    objectBoundaryCheckAll(e)
  }
}

function objectBoundaryCheckAll(e){
  var boundaryHit = false;
  setLinePositions(e);
  log.info( "Entering  objectBoundaryCheck");
  $("#saveMessage").text('Changes Made, Save Pending...');
  e.target.setCoords();
  console.log("Object in boundary check: ", e.target)

  log.debug( "Checking to see if the end points of a line are being dragged ");
  if (e.target.type != "circlezero" && e.target.type != "circleone" && e.target.type != "conearrow" && e.target.type != "carrow"  && e.target.type != "carrowtwo") {
     var obj = e.target;
     var posBottom = e.target.getBoundingRect().top + e.target.getBoundingRect().height;
     var posRight = e.target.getBoundingRect().left + e.target.getBoundingRect().width;
     var boundRect = obj.getBoundingRect();
     var x1Delta = -(boundRect.left - obj.left)
     var y1Delta = -(boundRect.top - obj.top)
     bounds = {tl: {x: 0, y: 0}, br: {x: canvas.width , y: canvas.height } };
     log.debug( "Checking to see if we hit the top-left corner");
     if((e.target.getBoundingRect().top <= bounds.tl.y || e.target.getBoundingRect().left <= bounds.tl.x) ){
       log.debug( "hit the top-left corner");
       e.target.setTop(Math.max(e.target.top  , y1Delta  ));
       e.target.left = Math.max(e.target.left , x1Delta );
       setLineCirclePositionsBoundary(e);
       canvas.deactivateAll();
       boundaryHit = true;
       e.target.setCoords();
     }

     // bot-right corner
     log.debug( "Checking to see if we hit the bot-right corner");
     if((posBottom >= bounds.br.y || posRight >= bounds.br.x )){
        if (posBottom >= bounds.br.y) {
           if (e.target.angle >= 270 && e.target.angle < 360) {
              e.target.top = bounds.br.y -  e.target.getBoundingRect().height + y1Delta;
           } else if (e.target.angle >= 90 && e.target.angle <= 180){
              e.target.top = bounds.br.y -  e.target.getBoundingRect().height + y1Delta
              log.debug("Calculated Top: " + (bounds.br.y -  e.target.getBoundingRect().height + y1Delta))
           } else if (e.target.angle > 180 && e.target.angle < 270){
              e.target.top = bounds.br.y -  e.target.getBoundingRect().height +y1Delta
           } else if (e.target.angle >= 0 && e.target.angle < 90){
              e.target.top = bounds.br.y -  e.target.getBoundingRect().height +y1Delta ;
           }

        }
        if (posRight >= bounds.br.x) {
           if (e.target.angle >= 270 && e.target.angle < 360) {
              e.target.left = bounds.br.x -  e.target.getBoundingRect().width;
           } else if (e.target.angle >= 90 && e.target.angle <= 180){
              e.target.left = bounds.br.x
           } else if (e.target.angle > 180 && e.target.angle < 270){
              e.target.left = bounds.br.x -  e.target.getBoundingRect().width +x1Delta
           } else if (e.target.angle >= 0 && e.target.angle < 90){
              e.target.left = bounds.br.x -  e.target.getBoundingRect().width +x1Delta ;
           }
        }
        boundaryHit = true;
        if (e.target.type == "customline"){
          lineobject.setLineCirclePositionsBoundary(e)
        }else if (e.target.type == "customlinearrow" || e.target.type == "customlinetwoarrow") {
           setLineCirclePositionsBoundary(e);
           canvas.deactivateAll();
        }
        e.target.setCoords();

    }
  } else {
    boundaryInspectorCircle(e)
  }
  onSave();
  log.info( "Leaving objectBoundaryCheck");
};


function boundaryInspectorCircle(e) {
   log.info( "Entering boundaryInspectorCircle");

   e.target.setCoords()
   var p = e.target;
   console.log("Type is: ", p.type)
   bounds = {tl: {x: 0, y:0}, br: {x: canvas.width , y: canvas.height } };
   if((p.type == 'circleone' || p.type == 'circlezero')) {
      if(p.top < bounds.tl.y || p.left < bounds.tl.x) {
         e.target.setTop(Math.max('0', e.target.top))
         e.target.left = Math.max('0', e.target.left)
      }  else if ((p.top + 2*p.radius) > bounds.br.y || (p.left + 2*p.radius) > bounds.br.x ) {
         e.target.setTop(Math.min(bounds.br.y, e.target.top + 2*p.radius ))
         e.target.left = Math.min(bounds.br.x, e.target.left + 2*p.radius)
      }
      if (p.type == "circleone")  {
         p.line && p.line.set({ 'x1': p.line.cone.left, 'y1': p.line.cone.top, 'x2': p.line.ctwo.left, 'y2': p.line.ctwo.top });
      } else {
         p.line && p.line.set({ 'x1': p.line.cone.left, 'y1': p.line.cone.top, 'x2': p.line.ctwo.left, 'y2': p.line.ctwo.top });
      }

      p.line.setCoords();
      e.target.setCoords();
      //canvas.renderAll();
   }
   if (p.type == 'conearrow') {
        if(p.top < bounds.tl.y || p.left < bounds.tl.x) {
           e.target.setTop(Math.max('0', e.target.top))
           e.target.left = Math.max('0', e.target.left)
        }  else if ((p.top + 2*p.radius) > bounds.br.y || (p.left + 2*p.radius) > bounds.br.x ) {
           e.target.setTop(Math.min(bounds.br.y, e.target.top + 2*p.radius ))
           e.target.left = Math.min(bounds.br.x, e.target.left + 2*p.radius)
        }
        console.log("conearrow: ", p.line)
        p.line && p.line.set({ 'x1': p.line.conearrow.left, 'y1': p.line.conearrow.top, 'x2': p.line.carrow.left, 'y2': p.line.carrow.top});
        p.line.setCoords();
        angle = calcArrowAngle(p.line.x1, p.line.y1, p.line.x2, p.line.y2);
        p.line.carrow.set('angle', angle + 90);
        e.target.setCoords();
   }

   if (p.type == 'carrow') {
        if(p.top < bounds.tl.y || p.left < bounds.tl.x) {
           e.target.setTop(Math.max('0', e.target.top))
           e.target.left = Math.max('0', e.target.left)
        }  else if ((p.top) > bounds.br.y || (p.left + p.width) > bounds.br.x ) {
           e.target.setTop(Math.min(bounds.br.y, e.target.top ))
           e.target.left = Math.min(bounds.br.x, e.target.left + p.width)
        }
        console.log("carrow: ", p)
        console.log("line: ", p.line)
        if (p.line.type == "customlinetwoarrow") {
           p.line && p.line.set({ 'x1': p.line.carrowtwo.left, 'y1': p.line.carrowtwo.top, 'x2': p.line.carrow.left, 'y2': p.line.carrow.top });
        } else {
           p.line && p.line.set({ 'x1': p.line.conearrow.left, 'y1': p.line.conearrow.top, 'x2': p.line.carrow.left, 'y2': p.line.carrow.top });
        }
        p.line.setCoords();
        angle = calcArrowAngle(p.line.x1, p.line.y1, p.line.x2, p.line.y2);
        p.set('angle', angle + 90);
        if (p.line.type == "customlinetwoarrow") {
          (p.line.carrowtwo).set({'angle': angle - 90});
        }
        e.target.setCoords();
   }

   if (p.type == 'carrowtwo') {
        if(p.top < bounds.tl.y || p.left < bounds.tl.x) {
           e.target.setTop(Math.max('0', e.target.top))
           e.target.left = Math.max('0', e.target.left)
        }  else if ((p.top) > bounds.br.y || (p.left + p.width) > bounds.br.x ) {
           e.target.setTop(Math.min(bounds.br.y, e.target.top))
           e.target.left = Math.min(bounds.br.x, e.target.left + p.width)
        }
        console.log("carrowtwo: ", p.line)
        p.line && p.line.set({'x1': p.left, 'y1': p.top, 'x2': p.line.carrow.left, 'y2': p.line.carrow.top});
        p.line.setCoords();
        angle = calcArrowAngle(p.line.x1, p.line.y1, p.line.x2, p.line.y2);
        p.set('angle', angle - 90);
        p.line.carrow.set('angle', angle+ 90);
        e.target.setCoords();
   }

   log.info( "Leaving boundaryInspectorCircle");
};

function objectResize(e) {
   log.info( "Entering objectResize");
   if(e.target.type == "circle") {
      circleobject.objectResize(e);
   } else if(e.target.type == "ellipse") {
      ellipseobject.objectResize(e);
   } else if(e.target.type == "rect") {
      rectobject.objectResize(e);
   }
   objectBoundaryCheck(e)
   log.info( "Leaving objectResize");
};

function selectionCleared(e)  {
   log.info( "Entering selectionCleared");
   lineActive = true
   lineSelected = false
   log.debug( "lineActive: ", lineActive);
   log.debug( "lineSelected: ", lineSelected);
   log.info( "Leaving selectionCleared");
};

function mouseDown(e)  {
    log.info( "Entering mouseDown");
    if (e.preventDefault) {
       e.preventDefault(); // Necessary. Allows us to drop.
    }
    $('#contextMenu').remove();
    contextmenuon = false;
    activeObject = false;
    log.debug( "contextmenuon: ", contextmenuon);
    log.info( "Leaving mouseDown");
};

function objectSelected(e) {
   log.info( "Entering objectSelected");
   activeObject = true;
   activeObjectVal = e.target;
   console.log("objectSelected: ", activeObjectVal);
   var objType = e.target.get('type');
   if (objType == 'customline') {
     lineobject.objectSelected(e);
   }
   if (objType == 'customlinearrow') {
     console.log("custom line selected");
     _curX = e.e.clientX;
     _curY = e.e.clientY;
     _c1Top = e.target.conearrow.getTop();
     _c1Left =  e.target.conearrow.getLeft();
     _c2Top = e.target.carrow.getTop();
     _c2Left = e.target.carrow.getLeft();
  }
  if (objType == 'customlinetwoarrow') {
    console.log("custom line two selected");
    _curX = e.e.clientX;
    _curY = e.e.clientY;
    _c1Top = e.target.carrow.getTop();
    _c1Left =  e.target.carrow.getLeft();
    console.log("customlinetwoarrow: ", e.target );
    _c2Top = e.target.carrowtwo.get('top');
    _c2Left = e.target.carrowtwo.getLeft();
 }
   var activeGroupCollection = canvas.getActiveGroup();
   var circleZeroInCollection = new Array();
   var circleOneInCollection = new Array();
   var customLineInCollection = new Array();
   if (activeGroupCollection)
   {
     //iterate through objects to see if it contains lineSelected
     groupObjectsCircleOne = activeGroupCollection.getObjects('circleone');
     for ( i=0; i < groupObjectsCircleOne.length; i++) {
       circleOneInCollection.push(groupObjectsCircleOne[i].belongsTo)
     }
     groupObjectsCircleZero = activeGroupCollection.getObjects('circlezero');
     for ( i=0; i < groupObjectsCircleZero.length; i++) {
       circleZeroInCollection.push(groupObjectsCircleZero[i].belongsTo)
     }
     groupObjectsCustomLine = activeGroupCollection.getObjects('customline');
     for ( i=0; i < groupObjectsCustomLine.length; i++) {
       customLineInCollection.push(groupObjectsCustomLine[i].objId)
     }
     console.log("circleOneInCollection:", circleOneInCollection)
     console.log("circleZeroInCollection:", circleZeroInCollection)
     console.log("customLineInCollection:", customLineInCollection)

     allObjects = canvas.getObjects();
     for (i=0; i< circleZeroInCollection.length; i++) {
       //Is the belongsTo found in circleOneInCollection
       if ($.inArray(circleZeroInCollection[i], circleOneInCollection) == -1)
       {
             // not found
             j = 0;
             notFound = true
             while(j < allObjects.length && notFound) {
               if (allObjects[j].type == 'circleone') {
                 if (allObjects[j].belongsTo == circleZeroInCollection[i]) {
                     circleOneInCollection.push( circleZeroInCollection[i])
                     activeGroupCollection.addWithUpdate(allObjects[j])
                     console.log("Found circleone for circlezero", circleOneInCollection)
                     notFound = false
                 }
               }
               j = j+1;
             }

       }
       if ($.inArray(circleZeroInCollection[i], customLineInCollection) == -1)
       {
             // not found
             j = 0;
             notFound = true
             while(j < allObjects.length && notFound) {
               if (allObjects[j].type == 'customline') {
                 if (allObjects[j].objId == circleZeroInCollection[i]) {
                     customLineInCollection.push( circleZeroInCollection[i])
                     activeGroupCollection.addWithUpdate(allObjects[j])
                     notFound = false
                     console.log("Found customline for circlezero", customLineInCollection)
                 }
               }
               j = j+1;
             }

       }
     }

     for (i=0; i< circleOneInCollection.length; i++) {
       //Is the belongsTo found in circleOneInCollection
       if ($.inArray(circleOneInCollection[i], circleZeroInCollection) == -1)
       {
             // not found
             j = 0;
             notFound = true
             while(j < allObjects.length && notFound) {
               if (allObjects[j].type == 'circlezero') {
                 if (allObjects[j].belongsTo == circleOneInCollection[i]) {
                     circleZeroInCollection.push( circleOneInCollection[i])
                     activeGroupCollection.addWithUpdate(allObjects[j])
                     notFound = false
                     console.log("Found circlezero for circleone", circleZeroInCollection)
                 }
               }
               j = j+1;
             }

       }
       if ($.inArray(circleOneInCollection[i], customLineInCollection) == -1)
       {
             // not found
             j = 0;
             notFound = true
             while(j < allObjects.length && notFound) {
               if (allObjects[j].type == 'customline') {
                 if (allObjects[j].objId == circleOneInCollection[i]) {
                     customLineInCollection.push( circleOneInCollection[i])
                     activeGroupCollection.addWithUpdate(allObjects[j])
                     notFound = false
                     console.log("Found customline for circleone", customLineInCollection)
                 }
               }
               j = j+1;
             }

       }
     }

     for (i=0; i< customLineInCollection.length; i++) {
       //Is the belongsTo found in circleOneInCollection
       if ($.inArray(customLineInCollection[i], circleZeroInCollection) == -1)
       {
             // not found
             j = 0;
             notFound = true
             while(j < allObjects.length && notFound) {
               if (allObjects[j].type == 'circlezero') {
                 if (allObjects[j].belongsTo == customLineInCollection[i]) {
                     circleZeroInCollection.push( customLineInCollection[i])
                     activeGroupCollection.addWithUpdate(allObjects[j])
                     notFound = false
                     console.log("Found circlezero for customline", circleZeroInCollection)
                 }
               }
               j = j+1;
             }

       }
       if ($.inArray(customLineInCollection[i], circleOneInCollection) == -1)
       {
             // not found
             j = 0;
             notFound = true
             while(j < allObjects.length && notFound) {
               if (allObjects[j].type == 'circleone') {
                 if (allObjects[j].belongsTo == customLineInCollection[i]) {
                     circleOneInCollection.push( customLineInCollection[i])
                     activeGroupCollection.addWithUpdate(allObjects[j])
                     notFound = false
                      console.log("Found circleone for customline", circleOneInCollection)
                 }
               }
               j = j+1;
             }

       }
     }
     console.log("circleOneInCollection:", circleOneInCollection)
     console.log("circleZeroInCollection:", circleZeroInCollection)
     console.log("customLineInCollection:", customLineInCollection)
     canvas.renderAll();

   }
   log.info( "Leaving objectSelected");
};

function mouseOut(e){
   log.info( "Entering mouseOut");
   contextmenuon = true;
   canvas.renderAll();
   log.info( "Leaving mouseOut");
};

function mouseOver(e) {
  log.info( "Entering mouseOver");
  contextmenuon = false;
  activeObjectVal = e.target
  if (e.target.type) {
       if (e.target.type == "line") {
         log.debug( "Target is line");
         searchId = getItemIndex(e.target);
         log.trace( e.target);
         canvas.setActiveObject(canvas.item(searchId))
       }
   }
   log.info( "Leaving mouseOver");
};

function postProcessLoading(o, object) {
  log.info( "Entering postProcessLoading");
  if (object.type == "custom-image") {
    log.debug( "Processing custom-image");
    object.on("mousedown", function(data, index) { imageDown(data,index)   });
  }
  if (object.type == "circle") {
    circleobject.postprocessLoading(object);
  }

  if (object.type == "circleone") {
    log.debug( "Processing circleone");
    object.hasBorders = object.hasControls = false;
  }

  if (object.type == "circlezero") {
    log.debug( "Processing circleone");
    object.hasBorders = object.hasControls = false;
  }

  if (object.type == "ellipse") {
    log.debug( "Processing ellipse");
    object.fill = undefined
    object.on("mousedown", function(data, index) { ellipseobject.ellipseDown(data,index);   });
  }

  if (object.type == "rect") {
    log.debug( "Processing rect");
    object.fill = undefined
    object.on("mousedown", function(data, index) { rectobject.rectangleDown(data,index);   });
  }

  if (object.type == "customline") {
    log.debug( "Processing customline");
    object.hasControls = false;
    object.on("mousedown", function(data, index) { lineDown(data,index); });
  }
  if (object.type == "i-text") {
    log.debug( "Processing i-text");
    object.on("mousedown", function(data, index) { textobject.textDown(data,index)   });
  }
  log.info( "Leaving postProcessLoading");

};

function handleDragStart(e) {
 log.info( "Entering handleDragStart");
 [].forEach.call(images, function (img) {
   img.classList.remove('img_dragging');
 });
 this.classList.add('img_dragging');
 log.info( "Leaving handleDragStart");
}

function makeLine(coords, id) {
   lineobject.makeLine(coords, id)
 }

 function makeLineArrow(coords, id) {
    log.info( "Entering makeLine");
    log.debug("Coords are: ", coords);
    line =  new fabric.Customlinearrow(coords, {
      x1: coords[0],
      y1: coords[1],
      x2: coords[2],
      y2: coords[3],
      fill: 'red',
      stroke: 'red',
      strokeWidth: 5,
      selectable: true,
      objId: id,
      perPixelTargetFind: true,
    });
    line.hasControls = false;
    log.info( "Leaving makeLine");
    return line;
  }

  function makeLineTwoArrow(coords, id) {
     log.info( "Entering makeLine");
     log.debug("Coords are: ", coords);
     line =  new fabric.Customlinetwoarrow(coords, {
       x1: coords[0],
       y1: coords[1],
       x2: coords[2],
       y2: coords[3],
       fill: 'red',
       stroke: 'red',
       strokeWidth: 5,
       selectable: true,
       objId: id,
       perPixelTargetFind: true,
     });
     line.hasControls = false;
     log.info( "Leaving makeLine");
     return line;
   }

 function makeArrowShape(coords, id) {
   arrow = new fabric.Arrowone({
            left: line.get(coords[0]),
            top: line.get(coords[1]),
            originX: 'center',
            originY: 'center',
            hasBorders: false,
            hasControls: false,
            lockScalingX: true,
            lockScalingY: true,
            lockRotation: true,
            pointType: 'arrow_start',
            angle: -225,
            width: 20,
            height: 20,
            fill: '#000'
        });
   return arrow;
 }
 function makeCircleShape(coords, id) {
   circleobject.makeCircleShape(coords, id)
 }

 function activateColorPicker(e) {
      log.info( "Entering activateColorPicker");
      console.log("activateColorPicker: ", e)
      activeObjectValCP = activeObjectVal;
      document.getElementById('myColor').color.showPicker();
      log.info( "Leaving activateColorPicker");
 }

 function colorPickerChange(newLineColor) {
      log.info( "Entering colorPickerChange");
      log.debug( "newLineColor: ", newLineColor);
      if (activeObjectValCP) {
        log.trace( "activeObjectVal: ", activeObjectValCP);
        if (activeObjectValCP.type) {
          log.trace( "activeObjectVal.type: ", activeObjectValCP.type);
          if (activeObjectValCP.type == "customline") {
            log.debug( "colorPickerChange on line type");
            activeObjectValCP.fill = newLineColor;
            activeObjectValCP.stroke = newLineColor;
          }
          if (activeObjectValCP.type == "customlinearrow") {
            log.debug( "colorPickerChange on line type");
            activeObjectValCP.fill = newLineColor;
            activeObjectValCP.stroke = newLineColor;
          }
          if (activeObjectValCP.type == "customlinetwoarrow") {
            log.debug( "colorPickerChange on line type");
            activeObjectValCP.fill = newLineColor;
            activeObjectValCP.stroke = newLineColor;
          }
          if (activeObjectValCP.type == "circle") {
            log.debug( "colorPickerChange on circle type");
            activeObjectValCP.stroke = newLineColor;
          }
          if (activeObjectValCP.type == "ellipse") {
            log.debug( "colorPickerChange on ellipse type");
            activeObjectValCP.stroke = newLineColor;
          }
          if (activeObjectValCP.type == "rect") {
            log.debug( "colorPickerChange on rect type");
            activeObjectValCP.stroke = newLineColor;
          }
          if (activeObjectValCP.type == "i-text") {
            log.debug( "colorPickerChange on i-text type");
            activeObjectValCP.stroke = newLineColor;
            //activeObjectVal.setColor(newLineColor);
          }
        }
      }
      canvas.renderAll();
      log.info( "Leaving colorPickerChange");
 }

 function makeCircle(line) {
     log.info( "Entering makeCircle");
     var c1 = new fabric.Circlezero({
       left: line.get('x1')-2.5,
       top: line.get('y1')-2.5,
       visible: 'true',
       hoverCursor: 'crosshair',
       strokeWidth:  2,
       stroke: '#000',
       radius: 5,
       fill: '#fff'
     });
     c1.setBelongsTo(line.objId);
     var c2 = new fabric.Circleone({
       left: line.get('x2')-2.5,
       top: line.get('y2')-2.5,
       visible: 'true',
       hoverCursor: 'crosshair',
       strokeWidth:  2,
       stroke: '#000',
       radius: 5,
       fill: '#fff'
     });
     c2.setBelongsTo(line.objId);
     c1.hasBorders = c1.hasControls = false;
     c2.hasBorders = c2.hasControls = false;

     c1.line = line;
     c2.line = line;
     line.cone = c1;
     line.ctwo = c2;
     var c = new Array(c1, c2);
     log.info( "Leaving makeCircle");
     return c;
 }

 function makeCircleArrow(line) {
     log.info( "Entering makeCircleArrow");
     var c1 = new fabric.Conearrow({
       left: line.get('x1')-2.5,
       top: line.get('y1')-2.5,
       visible: 'true',
       hoverCursor: 'crosshair',
       strokeWidth:  2,
       stroke: '#000',
       radius: 5,
       fill: '#fff'
     });
     c1.setBelongsTo(line.objId);
     var c2 =  new fabric.Carrow({
              left: line.get('x2'),
              top: line.get('y2'),
              originX: 'center',
              originY: 'center',
              hasBorders: false,
              hasControls: false,
              lockScalingX: true,
              lockScalingY: true,
              lockRotation: true,
              pointType: 'arrow_start',
              angle: 135,
              width: 20,
              height: 20,
              fill: '#000'
          });
     c2.setBelongsTo(line.objId);
     c1.hasBorders = c1.hasControls = false;
     c2.hasBorders = c2.hasControls = false;

     c1.line = line;
     c2.line = line;
     line.conearrow = c1;
     line.carrow = c2;
     var c = new Array(c1, c2);
     log.info( "Leaving makeCircle");
     return c;
 }

 function makeArrowTwo(line) {
     log.info( "Entering makeArrowTwo");
     var c1 =  new fabric.Carrowtwo({
              left: line.get('x1')-2.5,
              top: line.get('y1')-2.5,
              originX: 'center',
              originY: 'center',
              hasBorders: false,
              hasControls: false,
              lockScalingX: true,
              lockScalingY: true,
              lockRotation: true,
              pointType: 'arrow_start',
              angle: -45,
              width: 20,
              height: 20,
              fill: '#000'
          });
     c1.setBelongsTo(line.objId);
     var c2 =  new fabric.Carrow({
              left: line.get('x2'),
              top: line.get('y2'),
              originX: 'center',
              originY: 'center',
              hasBorders: false,
              hasControls: false,
              lockScalingX: true,
              lockScalingY: true,
              lockRotation: true,
              pointType: 'arrow_start',
              angle: 135,
              width: 20,
              height: 20,
              fill: '#000'
          });
     c2.setBelongsTo(line.objId);
     c1.hasBorders = c1.hasControls = false;
     c2.hasBorders = c2.hasControls = false;
     c1.line = line;
     c2.line = line;
     line.carrowtwo = c1;
     line.carrow = c2;
     var c = new Array(c1, c2);
     log.info( "Leaving makeCircle");
     return c;
 }

function handleDragOver(e) {
   log.info( "Entering handleDragOver");
   if (e.preventDefault) {
      e.preventDefault(); // Necessary. Allows us to drop.
   }

   e.dataTransfer.dropEffect = 'copy'; // See the section on the DataTransfer object.
   // NOTE: comment above refers to the article (see top) -natchiketa
   log.info( "Leaving handleDragOver");
   return false;
}

function handleDragEnter(e) {
   log.info( "Entering handleDragEnter");
   // this / e.target is the current hover target.
   this.classList.add('over');
   log.info( "Leaving handleDragEnter");
}

function handleDragLeave(e) {
    log.info( "Entering handleDragLeave");
    this.classList.remove('over'); // this / e.target is previous target element.
    log.info( "Leaving handleDragLeave");
}

function sendBackward() {
   log.info( "Entering sendBackward");
   var activeObjectVal = canvas.getActiveObject();
   if (activeObjectVal) {
      canvas.sendBackwards(activeObjectVal);
   }
   $('#contextMenu').remove();
   contextmenuon = false;
   activeObject = false;
   log.info( "Leaving sendBackward");
}

function sendToBack() {
   log.info( "Entering sendToBack");
   var activeObjectVal = canvas.getActiveObject();
   if (activeObjectVal) {
      canvas.sendToBack(activeObjectVal);
   }
   $('#contextMenu').remove();
   contextmenuon = false;
   activeObject = false;
   log.info( "Leaving sendToBack");
}

function bringFoward() {
   log.info( "Entering bringFoward");
   var activeObjectVal = canvas.getActiveObject();
   if (activeObjectVal) {
      canvas.bringForward(activeObjectVal);
   }
   $('#contextMenu').remove();
   contextmenuon = false;
   activeObject = false;
   log.info( "Leaving bringFoward");
}

function bringToFront() {
   log.info( "Entering bringToFront");
   var activeObjectVal = canvas.getActiveObject();
   if (activeObjectVal) {
      canvas.bringToFront(activeObjectVal);
   }
   $('#contextMenu').remove();
   contextmenuon = false;
   activeObject = false;
   log.info( "Leaving bringToFront");
}

function lineDown(data,index) {
  lineobject.lineDown(data,index);
}

function lineArrowDown(data,index) {
   log.info( "Entering lineDown");
   console.log( "Entering lineDown");
   console.log("data: ", data)

   if (activeObjectVal) {
     activeObject = true;
   }
   if (handler != "") {
      document.removeEventListener('contextmenu', handler);
   }
   if (data.e.which == 3) {
      handler = function(e) {
         if (contextmenuon == false &&  activeObject == true) {
            e.preventDefault();
            var items = ["Delete Line", "Change Color", "Send Backward", "Send To Back", "Bring Forward", "Bring To Front"];
            menus(items, e);
            $('a:contains("Delete")').click(  function() {
                                             if (activeObjectVal.type) {
                                               if (activeObjectVal.type == "customlinearrow") {
                                                 canvas.remove(activeObjectVal.conearrow)
                                                 canvas.remove(activeObjectVal.carrow)
                                                 canvas.remove(activeObjectVal);
                                               } else if(activeObjectVal.hasOwnProperty('belongsTo')) {
                                                 console.log("removing belongTo object")
                                                 var objs = canvas.getObjects()
                                                 // find line with belongsTo value
                                                 var searchVal = activeObjectVal.get('belongsTo')
                                                 var found = false;
                                                 var i = 0;
                                                 while (!found && i < objs.length) {
                                                   if (objs[i].type == "customlinearrow") {
                                                     if (objs[i].objId == searchVal) {
                                                       found= true;
                                                     }
                                                   }
                                                   i = i + 1;
                                                 }
                                                 if (found) {
                                                   i = i -1;
                                                   canvas.remove(objs[i].conearrow)
                                                   canvas.remove(objs[i].carrow)
                                                   canvas.remove(objs[i]);
                                                 }
                                                 canvas.renderAll()
                                               }
                                             }
                                             $('#contextMenu').remove();
                                             contextmenuon = false;
                                             activeObject = false;
                                           });
           $('a:contains("Change Color")').click(function() {activateColorPicker(e);
                                                             $('#contextMenu').remove();
                                                             contextmenuon = false;}
                                                );
           $('a:contains("Send Backward")').click(function() {sendBackward();});
           $('a:contains("Send To Back")').click(function() {sendToBack();});
           $('a:contains("Bring Forward")').click(function() {bringFoward();});
           $('a:contains("Bring To Front")').click(function() {bringToFront();});
           contextmenuon = true;
        };
      }
      document.addEventListener('contextmenu', handler, false);
   }
   log.info( "Leaving lineDown");
}

function lineArrowTwoDown(data,index) {
   log.info( "Entering lineDown");
   console.log( "Entering lineDown");
   console.log("data: ", data)

   if (activeObjectVal) {
     activeObject = true;
   }
   if (handler != "") {
      document.removeEventListener('contextmenu', handler);
   }
   if (data.e.which == 3) {
      handler = function(e) {
         if (contextmenuon == false &&  activeObject == true) {
            e.preventDefault();
            var items = ["Delete Line", "Change Color", "Send Backward", "Send To Back", "Bring Forward", "Bring To Front"];
            menus(items, e);
            $('a:contains("Delete")').click(  function() {
                                             console.log("In Delete customlinetwoarrow")
                                             if (activeObjectVal.type) {
                                               console.log("Object Found: ", activeObjectVal.type)
                                               if (activeObjectVal.type == "customlinetwoarrow") {
                                                 canvas.remove(activeObjectVal.carrowtwo)
                                                 canvas.remove(activeObjectVal.carrow)
                                                 canvas.remove(activeObjectVal);
                                               } else if(activeObjectVal.hasOwnProperty('belongsTo')) {
                                                 console.log("removing belongTo object")
                                                 var objs = canvas.getObjects()
                                                 // find line with belongsTo value
                                                 var searchVal = activeObjectVal.get('belongsTo')
                                                 var found = false;
                                                 var i = 0;
                                                 while (!found && i < objs.length) {
                                                   if (objs[i].type == "customlinetwoarrow") {
                                                     if (objs[i].objId == searchVal) {
                                                       found= true;
                                                     }
                                                   }
                                                   i = i + 1;
                                                 }
                                                 if (found) {
                                                   i = i -1;
                                                   canvas.remove(objs[i].carrowtwo)
                                                   canvas.remove(objs[i].carrow)
                                                   canvas.remove(objs[i]);
                                                 }
                                                 canvas.renderAll()
                                               }
                                             }
                                             $('#contextMenu').remove();
                                             contextmenuon = false;
                                             activeObject = false;
                                           });
           $('a:contains("Change Color")').click(function() {activateColorPicker(e);
                                                             $('#contextMenu').remove();
                                                             contextmenuon = false;}
                                                );
           $('a:contains("Send Backward")').click(function() {sendBackward();});
           $('a:contains("Send To Back")').click(function() {sendToBack();});
           $('a:contains("Bring Forward")').click(function() {bringFoward();});
           $('a:contains("Bring To Front")').click(function() {bringToFront();});
           contextmenuon = true;
        };
      }
      document.addEventListener('contextmenu', handler, false);
   }
   log.info( "Leaving lineDown");
}

function circleDown(data,index) {
   circleobject.circleDown(data,index);
}

function imageDown(data,index) {
   log.info( "Entering imageDown");
   console.log("data", data)
   if (handler != "") {
      document.removeEventListener('contextmenu', handler);
   }
   if (activeObjectVal) {
     activeObject = true;
   }
   /*
   if (canvas.getActiveObject() != null) {
     activeObjectVal = canvas.getActiveObject();
     activeObject = true;
     console.log("ActiveObjectVal: " , activeObjectVal )
   }
   */
   if (data.e.which == 3) {
      handler = function(e) {
         if (contextmenuon == false &&  activeObject == true) {
            e.preventDefault();
            log.trace("ActiveObjectVal: ", activeObjectVal);
            log.trace("Has configdbid property: ", activeObjectVal.hasOwnProperty('configdbid'));
            if (activeObjectVal.configdbid != false) {
               var items = ["Configure","Delete Image", "Send To Back", "Send Backward", "Bring Forward", "Bring To Front"];
            } else {
               var items = ["Delete Image", "Send To Back", "Send Backward", "Bring Forward", "Bring To Front"];
            }
            menus(items, e);
            $('a:contains("Configure")').click( function() {
                                                   var productId = activeObjectVal.configdbid
                                                   var companyId = 1
                                                   searchId = getItemIndex(activeObjectVal)
                                                   canvas.setActiveObject(canvas.item(searchId))
                                                   $('#configsection').modal('show');
                                                   $('#gifspinner').show();
                                                   document.getElementById('data').innerHTML = "";
                                                   var selectChoices = false;
                                                   var splitVals = "";
                                                   var objectConfig = canvas.item(searchId).config
                                                   if (objectConfig != undefined) {
                                                      log.info( "Object Config is Defined: ", objectConfig);
                                                      selectChoices = true;
                                                      splitVals = objectConfig.split("-")
                                                   }
                                                   var json_url = "/companies/" + companyId + "/prices/" + productId + "/productconfig.json"
                                                   var jsondata = "";
                                                   $.ajax({
                                                           url: json_url, // Route to the Script Controller method
                                                          type: "GET",
                                                      dataType: "json",
                                                          data: jsondata,
                                                   contentType: "application/json",
                                                       timeout: 3000, // sets timeout to 3 seconds
                                                      complete: function() {
                                                                  $('#gifspinner').fadeOut( 400 );
                                                                  log.info( "Ajax Call is Complete");
                                                                },
                                                       success: function(data, textStatus, xhr) {
                                                                   loadConfigScreen( data, selectChoices, splitVals );
                                                                   log.trace(data)
                                                                   log.info( "Ajax Call is Success");
                                                                },
                                                         error: function(data, textStatus) {
                                                                log.trace(data);
                                                                alert(textStatus);
                                                                log.info( textStatus);
                                                                }
                                                        });
                                                   $('#contextMenu').remove();
                                                   contextmenuon = false;
                                                   activeObject = true;
                                                });
            $('a:contains("Delete")').click(  function() {log.debug("imageDown: In Delete");
                                               log.trace(activeObjectVal);
                                               canvas.remove(activeObjectVal);
                                               $('#contextMenu').remove();
                                               contextmenuon = false;
                                               activeObject = false;}   );
            $('a:contains("Change Color")').click(function() {activateColorPicker(e);});
            $('a:contains("Send Backward")').click(function() {sendBackward();});
            $('a:contains("Send To Back")').click(function() {sendToBack();});
            $('a:contains("Bring Forward")').click(function() {bringFoward();});
            $('a:contains("Bring To Front")').click(function() {bringToFront();});
            contextmenuon = true;
        };
     };
   };
   document.addEventListener('contextmenu', handler, false);
   log.info( "Leaving imageDown");
}


function handleDrop(e) {
   log.info( "Entering handleDrop");
   $("#saveMessage").text('Changes Made, Save Pending...');
   var img = document.querySelector('#images img.img_dragging');
   img.height = img.height;
   img.width = img.width;
   log.trace("Draggable Stage:", img);
   var draggy = "";
   if (e.stopPropagation) {
      e.stopPropagation(); // stops the browser from redirecting.
   }

   if (!(img == null)) {
      var imgsrc_val = img.getAttribute("img_val");
      log.debug("imgsrc_val: ", imgsrc_val)
      if (imgsrc_val == "line.png")
      {
         lineobject.lineDrop(e,id);
      } else if (imgsrc_val == "line_arrow_icon.png") {
         log.debug("In line.png section");
         objectName = "customlinearrow";
         var xpos1 = e.layerX;
         var ypos1 = e.layerY;
         var xpos2 = xpos1 + 25;
         var ypos2 = ypos1 + 25;
         objId = id;
         var line = makeLineArrow([ xpos1, ypos1, xpos2, ypos2 ], id)
         line.hasControls = false
         itemId = itemId + 1;
         line.id = itemId
         line.objId = itemId;
         canvas.add(line)
         c[id] = makeCircleArrow(line);
         line.conearrow = c[id][0];
         line.carrow= c[id][1];
         console.log("Line coords: ",line.get('x1') ,line.get('y1') ,line.get('x2') , line.get('y2'))
         console.log("circle and arrow: ", c[id][0], ":", c[id][1])
         canvas.add(c[id][0],c[id][1]);
         canvas.renderAll();
         line.on("mousedown", function(data, index) { lineArrowDown(data,index); });
      } else if (imgsrc_val == "line_arrow_two_icon.png") {
        log.debug("In line.png section");
        objectName = "customlinetwoarrow";
        var xpos1 = e.layerX;
        var ypos1 = e.layerY;
        var xpos2 = xpos1 + 25;
        var ypos2 = ypos1 + 25;
        objId = id;
        var line = makeLineTwoArrow([ xpos1, ypos1, xpos2, ypos2 ], id)
        line.hasControls = false
        itemId = itemId + 1;
        line.id = itemId
        line.objId = itemId;
        canvas.add(line)
        c[id] = makeArrowTwo(line);
        line.carrowtwo = c[id][0];
        line.carrow    = c[id][1];
        console.log("Line coords: ",line.get('x1') ,line.get('y1') ,line.get('x2') , line.get('y2'))
        console.log("circle and arrow: ", c[id][0], ":", c[id][1])
        canvas.add(c[id][0],c[id][1]);
        canvas.renderAll();
        line.on("mousedown", function(data, index) { lineArrowTwoDown(data,index); });
      } else if (imgsrc_val == "circle_icon.png") {
        circleobject.circledrop(e, id);
      } else if (imgsrc_val == "ellipse_icon.png") {
        ellipseobject.ellipsedrop(e,id);
      } else if (imgsrc_val == "rectangle-icon.png") {
        rectobject.rectdrop(e, id);
      } else if (imgsrc_val == "textbox_icon.png") {
         log.debug("In textbox_icon.png section");
         var textbox = new fabric.IText('Tap and Type', {
             fontFamily: 'arial black',
             fontSize: 12,
             left: e.layerX,
             top: e.layerY
         });
         textbox.hasBorders = textbox.hasControls = true
         textbox.id = itemId
         itemId = itemId + 1;
         canvas.add(textbox);
         textbox.on("mousedown", function(data, index) { textobject.textDown(data,index); });
      } else {
         log.debug("In drag down else category")
         var newImage = new fabric.CustomImage(img, {
            width: img.width,
            height: img.height,
            left: e.layerX,
            top: e.layerY,
            config: 'undefined',
            origloc: 'undefined'
         });

         if(img.hasAttribute('data-config')) {
           log.debug("Has data-config")
           newImage.configdbid = img.getAttribute('data-config')
           log.debug("data-config: ", newImage.configdbid);
         } else {
           newImage.configdbid = false;
         }
         if(img.hasAttribute('data-model')) {
           log.debug("Has data-model")
           newImage.model = img.getAttribute('data-model')
           log.debug("data-model: ", newImage.model);
         } else {
           newImage.model = false;
         }
         if(img.hasAttribute('data-loc')) {
           log.debug("Has data-loc")
           newImage.origloc = img.getAttribute('data-loc')
           log.debug("data-loc: ", newImage.origloc);
         } else {
           newImage.origloc = false;
         }
         newImage.id = itemId
         newImage.setSrc("/assets/" + newImage.origloc,
                  function(obj) {
                    log.debug("Object");
                    log.debug("In callback for setSrc function");
                    log.trace(obj);
                  },
                  {
                    'height':img.height,
                    'width':img.width
                  });
         newImage.setCoords();
         log.debug("--- newImage.src ------");
         log.debug("src:",newImage.getSrc());
         log.debug("Height",newImage.getHeight());
         log.debug("Width", newImage.getWidth());
         itemId = itemId + 1;
         newImage.on("mousedown", function(data, index) { imageDown(data,index); });
         canvas.add(newImage);
         canvas.renderAll();

      }
      this.classList.remove('over');
      onSave();
      return false;
   }
   onSave();
   log.info( "Leaving handleDrop");
}

function contextMenu(env) {
   log.info( "Entering contextMenu");
   var x = env.offsetX;
   var y = env.offsetY;
   $.each (canvas._objects, function(i, e) {
   // e.left and e.top are the middle of the object use some "math" to find the outer edges
     var d = e.width / 2;
     var h = e.height / 2;
     if (x >= (e.left - d) && x <= (e.left+d)) {
        if(y >= (e.top - h) && y <= (e.top+h)) {
           return false; //in case the icons are stacked only take action on one.
        }
     }
   });
   log.info( "Leaving contextMenu");
   return false; //stops the event propigation
}

function menus(items, event) {
   log.info( "Entering menus");
   var $contextMenu = "";
   if (contextmenuon == false) {
      var menucontainer = document.createElement('div');
      menucontainer.id = 'contextMenu';
      var html = "<ul class='dropdown-menu' role='menu' style='display:block;position:static;' >";
      for (index=0; index < items.length; index++) {
         html += "<li> <a tabindex=''-1'>" + items[index] + "</a> </li>";
      }
      html += "</ul>" ;
      menucontainer.innerHTML = html;
      $('body').append(menucontainer);
      $contextMenu = $("#contextMenu");
      $contextMenu.css({
         display: "block",
         left: event.pageX,
         top: event.pageY
       });

   } else {
     log.info("Menu Not Displayed contextmenu is true");
   }
   log.info( "Leaving menus");
};

function handleDragEnd(e) {
   log.info( "Entering handleDragEnd");
   // this/e.target is the source node.
   [].forEach.call(images, function (img) {    img.classList.remove('img_dragging');  });
   log.info( "Leaving handleDragEnd");
};

function drawAsPNG(){
    log.info( "Entering drawAsPNG");
    canvas.isDrawingMode = false;

    if(!window.localStorage){alert("This function is not supported by your browser."); return;}
    // to PNG
    window.open(canvas.toDataURL('png'));
    log.info( "Leaving drawAsPNG");
};

function getItemIndex(object) {
     log.info( "Entering getItemIndex");
     id = object.id;
     index = 0;
     objectList = canvas.getObjects();
     for (i = 0; i < objectList.length; i++) {
       if (objectList[i].id == id) {
         index = i
       }
     }
     log.info( "Leaving getItemIndex");
     return index;
}

function backgroundModal() {
  log.info( "Entering backgroundModal");
  $('#backgroundSection').modal('show');
  log.info( "Leaving backgroundModal");
}

 function calcArrowAngle(x1, y1, x2, y2) {
        var angle = 0,
            x, y;

        x = (x2 - x1);
        y = (y2 - y1);

        if (x === 0) {
            angle = (y === 0) ? 0 : (y > 0) ? Math.PI / 2 : Math.PI * 3 / 2;
        } else if (y === 0) {
            angle = (x > 0) ? 0 : Math.PI;
        } else {
            angle = (x < 0) ? Math.atan(y / x) + Math.PI : (y < 0) ? Math.atan(y / x) + (2 * Math.PI) : Math.atan(y / x);
        }

        return (angle * 180 / Math.PI);
    }
