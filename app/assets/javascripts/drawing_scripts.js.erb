var id = 0;

function setLinePositions(e) {
  var p = e.target;
  var objType = p.get('type');
    if (objType == 'customline') {
      lineobject.setLinePositions(e);
    }

    if (objType == 'customlinearrow') {
      customlinearrow.setLinePositions(e);
    }

    if (objType == 'customlinetwoarrow') {
      customlinetwoarrow.setLinePositions(e);
    }
}

function setLineCirclePositionsBoundary(e) {
    var p = e.target;
    if (p.type == "customline") {
        lineobject.setLineCirclePositionsBoundary(e);
    }
    if (p.type == "customlinearrow") {
       customlinearrow.setLineCirclePositionsBoundary(e);
    }

    if (p.type == "customlinetwoarrow") {
      customlinetwoarrow.setLineCirclePositionsBoundary(e);
    }
    p.setCoords();
    _curX = e.e.clientX;
    _curY = e.e.clientY;

}

function objectBoundaryCheck(e) {
  if (e.target.type == "customline") {
    lineobject.objectBoundaryCheck(e);
  } else if (e.target.type == "customlinearrow") {
    customlinearrow.objectBoundaryCheck(e);
  }else {
    objectBoundaryCheckAll(e)
  }
}

function objectBoundaryCheckAll(e){
  var boundaryHit = false;
  setLinePositions(e);
  log.info( "Entering  objectBoundaryCheck");
  $("#saveMessage").text('Changes Made, Save Pending...');
  e.target.setCoords();

  log.debug( "Checking to see if the end points of a line are being dragged ");
  if (e.target.type != "circlezero" && e.target.type != "circleone" && e.target.type != "conearrow" && e.target.type != "carrow"  && e.target.type != "carrowtwo") {
     var obj = e.target;
     var posBottom = e.target.getBoundingRect().top + e.target.getBoundingRect().height;
     var posRight = e.target.getBoundingRect().left + e.target.getBoundingRect().width;
     var boundRect = obj.getBoundingRect();
     var x1Delta = -(boundRect.left - obj.left)
     var y1Delta = -(boundRect.top - obj.top)
     bounds = {tl: {x: 0, y: 0}, br: {x: canvas.width , y: canvas.height } };
     log.debug( "Checking to see if we hit the top-left corner");
     if((e.target.getBoundingRect().top <= bounds.tl.y || e.target.getBoundingRect().left <= bounds.tl.x) ){
       log.debug( "hit the top-left corner");
       e.target.setTop(Math.max(e.target.top  , y1Delta  ));
       e.target.left = Math.max(e.target.left , x1Delta );
       setLineCirclePositionsBoundary(e);
       //canvas.deactivateAll();
       boundaryHit = true;
       e.target.setCoords();
     }

     // bot-right corner
     log.debug( "Checking to see if we hit the bot-right corner");
     if((posBottom >= bounds.br.y || posRight >= bounds.br.x )){
        if (posBottom >= bounds.br.y) {
           if (e.target.angle >= 270 && e.target.angle < 360) {
              e.target.top = bounds.br.y -  e.target.getBoundingRect().height + y1Delta;
           } else if (e.target.angle >= 90 && e.target.angle <= 180){
              e.target.top = bounds.br.y -  e.target.getBoundingRect().height + y1Delta
              log.debug("Calculated Top: " + (bounds.br.y -  e.target.getBoundingRect().height + y1Delta))
           } else if (e.target.angle > 180 && e.target.angle < 270){
              e.target.top = bounds.br.y -  e.target.getBoundingRect().height +y1Delta
           } else if (e.target.angle >= 0 && e.target.angle < 90){
              e.target.top = bounds.br.y -  e.target.getBoundingRect().height +y1Delta ;
           }

        }
        if (posRight >= bounds.br.x) {
           if (e.target.angle >= 270 && e.target.angle < 360) {
              e.target.left = bounds.br.x -  e.target.getBoundingRect().width;
           } else if (e.target.angle >= 90 && e.target.angle <= 180){
              e.target.left = bounds.br.x
           } else if (e.target.angle > 180 && e.target.angle < 270){
              e.target.left = bounds.br.x -  e.target.getBoundingRect().width +x1Delta
           } else if (e.target.angle >= 0 && e.target.angle < 90){
              e.target.left = bounds.br.x -  e.target.getBoundingRect().width +x1Delta ;
           }
        }
        boundaryHit = true;
        if (e.target.type == "customline"){
          lineobject.setLineCirclePositionsBoundary(e)
        }else if (e.target.type == "customlinearrow" || e.target.type == "customlinetwoarrow") {
           setLineCirclePositionsBoundary(e);
           //canvas.deactivateAll();
        }
        e.target.setCoords();

    }
  } else {
    boundaryInspectorCircle(e)
  }
  onSave();
  log.info( "Leaving objectBoundaryCheck");
};


function boundaryInspectorCircle(e) {
   log.info( "Entering boundaryInspectorCircle");

   e.target.setCoords()
   var p = e.target;
   //console.log("Type is: ", p.type)
   bounds = {tl: {x: 0, y:0}, br: {x: canvas.width , y: canvas.height } };
   if((p.type == 'circleone' || p.type == 'circlezero')) {
      if(p.top < bounds.tl.y || p.left < bounds.tl.x) {
         e.target.setTop(Math.max('0', e.target.top))
         e.target.left = Math.max('0', e.target.left)
      }  else if ((p.top + 2*p.radius) > bounds.br.y || (p.left + 2*p.radius) > bounds.br.x ) {
         e.target.setTop(Math.min(bounds.br.y, e.target.top + 2*p.radius ))
         e.target.left = Math.min(bounds.br.x, e.target.left + 2*p.radius)
      }
      p.line && p.line.set({ 'x1': p.line.cone.left, 'y1': p.line.cone.top, 'x2': p.line.ctwo.left, 'y2': p.line.ctwo.top });

      p.line.setCoords();
      e.target.setCoords();
   }
   if (p.type == 'conearrow') {
        if(p.top < bounds.tl.y || p.left < bounds.tl.x) {
           e.target.setTop(Math.max('0', e.target.top))
           e.target.left = Math.max('0', e.target.left)
        }  else if ((p.top + 2*p.radius) > bounds.br.y || (p.left + 2*p.radius) > bounds.br.x ) {
           e.target.setTop(Math.min(bounds.br.y, e.target.top + 2*p.radius ))
           e.target.left = Math.min(bounds.br.x, e.target.left + 2*p.radius)
        }
        p.line && p.line.set({ 'x1': p.line.conearrow.left, 'y1': p.line.conearrow.top, 'x2': p.line.carrow.left, 'y2': p.line.carrow.top});
        p.line.setCoords();
        angle = calcArrowAngle(p.line.x1, p.line.y1, p.line.x2, p.line.y2);
        p.line.carrow.set('angle', angle + 90);
        e.target.setCoords();
   }

   if (p.type == 'carrow') {
        if(p.top < bounds.tl.y || p.left < bounds.tl.x) {
           e.target.setTop(Math.max('0', e.target.top))
           e.target.left = Math.max('0', e.target.left)
        }  else if ((p.top) > bounds.br.y || (p.left + p.width) > bounds.br.x ) {
           e.target.setTop(Math.min(bounds.br.y, e.target.top ))
           e.target.left = Math.min(bounds.br.x, e.target.left + p.width)
        }
        if (p.line.type == "customlinetwoarrow") {
           p.line && p.line.set({ 'x1': p.line.carrowtwo.left, 'y1': p.line.carrowtwo.top, 'x2': p.line.carrow.left, 'y2': p.line.carrow.top });
        } else {
           p.line && p.line.set({ 'x1': p.line.conearrow.left, 'y1': p.line.conearrow.top, 'x2': p.line.carrow.left, 'y2': p.line.carrow.top });
        }
        p.line.setCoords();
        angle = calcArrowAngle(p.line.x1, p.line.y1, p.line.x2, p.line.y2);
        p.set('angle', angle + 90);
        if (p.line.type == "customlinetwoarrow") {
          (p.line.carrowtwo).set({'angle': angle - 90});
        }
        e.target.setCoords();
   }

   if (p.type == 'carrowtwo') {
        if(p.top < bounds.tl.y || p.left < bounds.tl.x) {
           e.target.setTop(Math.max('0', e.target.top))
           e.target.left = Math.max('0', e.target.left)
        }  else if ((p.top) > bounds.br.y || (p.left + p.width) > bounds.br.x ) {
           e.target.setTop(Math.min(bounds.br.y, e.target.top))
           e.target.left = Math.min(bounds.br.x, e.target.left + p.width)
        }
        p.line && p.line.set({'x1': p.left, 'y1': p.top, 'x2': p.line.carrow.left, 'y2': p.line.carrow.top});
        p.line.setCoords();
        angle = calcArrowAngle(p.line.x1, p.line.y1, p.line.x2, p.line.y2);
        p.set('angle', angle - 90);
        p.line.carrow.set('angle', angle+ 90);
        e.target.setCoords();
   }

   log.info( "Leaving boundaryInspectorCircle");
};

function objectResize(e) {
   log.info( "Entering objectResize");
   if(e.target.type == "circle") {
      circleobject.objectResize(e);
   } else if(e.target.type == "ellipse") {
      ellipseobject.objectResize(e);
   } else if(e.target.type == "rect") {
      rectobject.objectResize(e);
   }
   objectBoundaryCheck(e)
   log.info( "Leaving objectResize");
};

function selectionCleared(e)  {
   log.info( "Entering selectionCleared");
   lineActive = true
   lineSelected = false
   log.debug( "lineActive: ", lineActive);
   log.debug( "lineSelected: ", lineSelected);
   log.info( "Leaving selectionCleared");
};

function mouseDown(e)  {
    log.info( "Entering mouseDown");
    if (e.preventDefault) {
       e.preventDefault(); // Necessary. Allows us to drop.
    }
    $('#contextMenu').remove();
    contextmenuon = false;
    activeObject = false;
    log.debug( "contextmenuon: ", contextmenuon);
    log.info( "Leaving mouseDown");
};

function objectSelected(e) {
   log.info( "Entering objectSelected");
   activeObject = true;
   activeObjectVal = e.target;
   console.log("Object Selected, ", activeObjectVal)
   var objType = e.target.get('type');
   if (objType == 'customline') {
     lineobject.objectSelected(e);
   }
   if (objType == 'customlinearrow') {
     _curX = e.e.clientX;
     _curY = e.e.clientY;
     _c1Top = e.target.conearrow.getTop();
     _c1Left =  e.target.conearrow.getLeft();
     _c2Top = e.target.carrow.getTop();
     _c2Left = e.target.carrow.getLeft();
  }
  if (objType == 'customlinetwoarrow') {
    _curX = e.e.clientX;
    _curY = e.e.clientY;
    _c1Top = e.target.carrow.getTop();
    _c1Left =  e.target.carrow.getLeft();
    _c2Top = e.target.carrowtwo.get('top');
    _c2Left = e.target.carrowtwo.getLeft();
 }
   var activeGroupCollection = canvas.getActiveGroup();
   var circleZeroInCollection = new Array();
   var circleOneInCollection = new Array();
   var circleOneArrowInCollection = new Array();
   var circleTwoArrowInCollection = new Array();
   var cArrowInCollection = new Array();
   var customLineInCollection = new Array();
   var customLineArrowInCollection = new Array();
   var customLineTwoArrowInCollection = new Array();
   if (activeGroupCollection)
   {
     //iterate through objects to see if it contains lineSelected
     groupObjectsCustomLineArrow = activeGroupCollection.getObjects('customlinearrow');
     for ( i=0; i < groupObjectsCustomLineArrow.length; i++) {
       customLineArrowInCollection.push(groupObjectsCustomLineArrow[i].objId)
       //console.log("Found Custom Line Arrow: ", groupObjectsCustomLineArrow[i].objId)
     }
     groupObjectsCustomLineTwoArrow = activeGroupCollection.getObjects('customlinetwoarrow');
     for ( i=0; i < groupObjectsCustomLineTwoArrow.length; i++) {
       customLineTwoArrowInCollection.push(groupObjectsCustomLineTwoArrow[i].objId)
       //console.log("Found Custom Line Two Arrow: ", groupObjectsCustomLineTwoArrow[i].objId)
     }
     groupObjectsCircleZero = activeGroupCollection.getObjects('circlezero');
     for ( i=0; i < groupObjectsCircleZero.length; i++) {
       circleZeroInCollection.push(groupObjectsCircleZero[i].belongsTo)
     }
     groupObjectsCustomLine = activeGroupCollection.getObjects('customline');
     for ( i=0; i < groupObjectsCustomLine.length; i++) {
       customLineInCollection.push(groupObjectsCustomLine[i].objId)
     }
     groupObjectsCircleOne = activeGroupCollection.getObjects('circleone');
     for ( i=0; i < groupObjectsCircleOne.length; i++) {
       circleOneInCollection.push(groupObjectsCircleOne[i].belongsTo)
     }
     groupObjectsCircleOneArrow = activeGroupCollection.getObjects('conearrow');
     for ( i=0; i < groupObjectsCircleOneArrow.length; i++) {
       circleOneArrowInCollection.push(groupObjectsCircleOneArrow[i].belongsTo)
     }
     groupObjectsCArrow = activeGroupCollection.getObjects('carrow');
     for ( i=0; i < groupObjectsCArrow.length; i++) {
       cArrowInCollection.push(groupObjectsCArrow[i].belongsTo)
     }
     groupObjectsCircleTwoArrow = activeGroupCollection.getObjects('carrowtwo');
     for ( i=0; i < groupObjectsCircleTwoArrow.length; i++) {
       circleTwoArrowInCollection.push(groupObjectsCircleTwoArrow[i].belongsTo)
     }

     allObjects = canvas.getObjects();
     includeEndPointsInGroup(activeGroupCollection, customLineInCollection, circleZeroInCollection, circleOneInCollection, allObjects, 'customline', 'circleone', 'circlezero')
     includeEndPointsInGroup(activeGroupCollection, customLineArrowInCollection, circleOneArrowInCollection, cArrowInCollection, allObjects, 'customlinearrow', 'carrow', 'conearrow')
     includeEndPointsInGroup(activeGroupCollection, customLineTwoArrowInCollection, circleTwoArrowInCollection, cArrowInCollection, allObjects, 'customlinetwoarrow', 'carrow', 'carrowtwo')

     canvas.renderAll();

   }
   log.info( "Leaving objectSelected");
};

function includeEndPointsInGroup(activeGroupCollection, customLineInCollection, circleZeroInCollection, circleOneInCollection, allObjects, lineType, c1Type, c2Type) {
  for (i=0; i< circleZeroInCollection.length; i++) {
    //Is the belongsTo found in circleOneInCollection
    if ($.inArray(circleZeroInCollection[i], circleOneInCollection) == -1)
    {
          // not found
          j = 0;
          notFound = true
          while(j < allObjects.length && notFound) {
            if (allObjects[j].type == c1Type) {
              if (allObjects[j].belongsTo == circleZeroInCollection[i]) {
                  circleOneInCollection.push( circleZeroInCollection[i])
                  activeGroupCollection.addWithUpdate(allObjects[j])
                  notFound = false;
              }
            }
            j = j+1;
          }

    }
    if ($.inArray(circleZeroInCollection[i], customLineInCollection) == -1)
    {
          // not found
          j = 0;
          notFound = true
          while(j < allObjects.length && notFound) {
            if (allObjects[j].type == lineType) {
              if (allObjects[j].objId == circleZeroInCollection[i]) {
                  customLineInCollection.push( circleZeroInCollection[i])
                  activeGroupCollection.addWithUpdate(allObjects[j])
                  notFound = false;
              }
            }
            j = j+1;
          }

    }
  }

  for (i=0; i< circleOneInCollection.length; i++) {
    //Is the belongsTo found in circleOneInCollection
    if ($.inArray(circleOneInCollection[i], circleZeroInCollection) == -1)
    {
          // not found
          j = 0;
          notFound = true
          while(j < allObjects.length && notFound) {
            if (allObjects[j].type == c2Type) {
              if (allObjects[j].belongsTo == circleOneInCollection[i]) {
                  circleZeroInCollection.push( circleOneInCollection[i])
                  activeGroupCollection.addWithUpdate(allObjects[j])
                  notFound = false;
              }
            }
            j = j+1;
          }

    }
    if ($.inArray(circleOneInCollection[i], customLineInCollection) == -1)
    {
          // not found
          j = 0;
          notFound = true
          while(j < allObjects.length && notFound) {
            if (allObjects[j].type == lineType) {
              if (allObjects[j].objId == circleOneInCollection[i]) {
                  customLineInCollection.push( circleOneInCollection[i])
                  activeGroupCollection.addWithUpdate(allObjects[j])
                  notFound = false;
              }
            }
            j = j+1;
          }

    }
  }

  for (i=0; i< customLineInCollection.length; i++) {
    //Is the belongsTo found in circleOneInCollection
    if ($.inArray(customLineInCollection[i], circleZeroInCollection) == -1)
    {
          // not found
          j = 0;
          notFound = true
          while(j < allObjects.length && notFound) {
            if (allObjects[j].type == c2Type) {
              if (allObjects[j].belongsTo == customLineInCollection[i]) {
                  circleZeroInCollection.push( customLineInCollection[i])
                  activeGroupCollection.addWithUpdate(allObjects[j])
                  notFound = false;
              }
            }
            j = j+1;
          }

    }
    if ($.inArray(customLineInCollection[i], circleOneInCollection) == -1)
    {
          // not found
          j = 0;
          notFound = true
          while(j < allObjects.length && notFound) {
            if (allObjects[j].type == c1Type) {
              if (allObjects[j].belongsTo == customLineInCollection[i]) {
                  circleOneInCollection.push( customLineInCollection[i])
                  activeGroupCollection.addWithUpdate(allObjects[j])
                  notFound = false;
              }
            }
            j = j+1;
          }

    }
  }
}


function mouseOut(e){
   log.info( "Entering mouseOut");
   contextmenuon = true;
   canvas.renderAll();
   log.info( "Leaving mouseOut");
};

function mouseOver(e) {
  log.info( "Entering mouseOver");
  contextmenuon = false;
  activeObjectVal = e.target;
  if (e.target) {
       if (e.target.type == "line") {
         log.debug( "Target is line");
         searchId = getItemIndex(e.target);
         log.trace( e.target);
         canvas.setActiveObject(canvas.item(searchId))
       }
   }
   log.info( "Leaving mouseOver");
};

function postProcessLoading(o, object) {
  log.info( "Entering postProcessLoading");
  if (object.type == "custom-image") {
    log.debug( "Processing custom-image");
    object.on("mousedown", function(data, index) { imageobject.imageDown(data,index)   });
  }
  if (object.type == "circle") {
    circleobject.postprocessLoading(object);
  }

  if (object.type == "circleone") {
    log.debug( "Processing circleone");
    object.hasBorders = object.hasControls = false;
  }

  if (object.type == "circlezero") {
    log.debug( "Processing circleone");
    object.hasBorders = object.hasControls = false;
  }

  if (object.type == "ellipse") {
    log.debug( "Processing ellipse");
    object.fill = undefined
    object.on("mousedown", function(data, index) { ellipseobject.ellipseDown(data,index);   });
  }

  if (object.type == "rect") {
    log.debug( "Processing rect");
    object.fill = undefined
    object.on("mousedown", function(data, index) { rectobject.rectangleDown(data,index);   });
  }

  if (object.type == "customline") {
    log.debug( "Processing customline");
    object.hasControls = false;
    object.on("mousedown", function(data, index) { lineDown(data,index); });
  }
  if (object.type == "i-text") {
    log.debug( "Processing i-text");
    object.on("mousedown", function(data, index) { textobject.textDown(data,index)   });
  }

  backgroundImageVal = "";
  if (canvas.backgroundImage !== null) {
     backgroundimg = canvas.backgroundImage;
     console.log("drawing_scripts: ", backgroundimg)
     if (backgroundimg.src !== null ) {
        backgroundImageVal = canvas.backgroundImage.src;
     }
  }
  log.info( "Leaving postProcessLoading");

};

function handleDragStart(e) {
 log.info( "Entering handleDragStart");
 [].forEach.call(images, function (img) {
   img.classList.remove('img_dragging');
 });
 this.classList.add('img_dragging');
 log.info( "Leaving handleDragStart");
}

function makeLine(coords, id) {
   lineobject.makeLine(coords, id)
 }

 function makeCircleShape(coords, id) {
   circleobject.makeCircleShape(coords, id)
 }

 function activateColorPicker(e) {
      log.info( "Entering activateColorPicker");
      //console.log("activateColorPicker: ", e)
      activeObjectValCP = activeObjectVal;
      document.getElementById('myColor').color.showPicker();
      log.info( "Leaving activateColorPicker");
 }

 function colorPickerChange(newLineColor) {
      console.log( "Entering colorPickerChange");
      log.debug( "newLineColor: ", newLineColor);
      if (canvas.getActiveObject()) {
        console.log( "activeObjectVal: ", canvas.getActiveObject());
        console.log( "type: ", canvas.getActiveObject().type);
        valType = canvas.getActiveObject().type;
        if (valType) {
          log.trace( "activeObjectVal.type: ", valType);
          if (valType == "customline" | valType == "customlinearrow" | valType == "customlinetwoarrow") {
            canvas.getActiveObject().set("fill",newLineColor);
            canvas.getActiveObject().set("stroke",newLineColor);
          }

          if (valType == "circle" | valType == "ellipse" | valType == "rect") {
            log.debug( "colorPickerChange on circle type");
              canvas.getActiveObject().set("stroke",newLineColor);
          }
          if (valType == "i-text") {
            console.log( "colorPickerChange on i-text type");
            //activeObjectValCP.stroke = newLineColor;
            canvas.getActiveObject().setColor(newLineColor);
            //activeObjectVal.setColor(newLineColor);
          }
        }
      }
      canvas.renderAll();
      log.info( "Leaving colorPickerChange");
 };

 function changeFontSize(size) {
      //console.log( "Entering changeFontSize");
      //console.log( size );
      var activeObjectVal = canvas.getActiveObject();
      //console.log(activeObjectVal);
      if (activeObjectVal.type == "i-text") {
        //console.log( "changeFontSize on i-text type");
        //activeObjectValCP.stroke = newLineColor;
        activeObjectVal.set("fontSize", size);
        canvas.renderAll();
        //activeObjectVal.setColor(newLineColor);
      }
      //console.log( "Leaving changeFontSize");
      $("#saveMessage").text('Changes Made, Save Pending...');
      onSave();
 }

 function changeFontFamily(ff) {
      //console.log( "Entering changeFontFamily");
      //console.log( ff );
      var activeObjectVal = canvas.getActiveObject();
      //console.log(activeObjectVal);
      if (activeObjectVal.type == "i-text") {
        console.log( "changeFontFamily on i-text type");
        //activeObjectValCP.stroke = newLineColor;
        activeObjectVal.set("fontFamily", ff);
        canvas.renderAll();
        //activeObjectVal.setColor(newLineColor);
      }
      //console.log( "Leaving changeFontFamily");
      $("#saveMessage").text('Changes Made, Save Pending...');
      onSave();
 }

function handleDragOver(e) {
   log.info( "Entering handleDragOver");
   if (e.preventDefault) {
      e.preventDefault(); // Necessary. Allows us to drop.
   }

   e.dataTransfer.dropEffect = 'copy'; // See the section on the DataTransfer object.
   // NOTE: comment above refers to the article (see top) -natchiketa
   log.info( "Leaving handleDragOver");
   return false;
}

function handleDragEnter(e) {
   log.info( "Entering handleDragEnter");
   // this / e.target is the current hover target.
   this.classList.add('over');
   log.info( "Leaving handleDragEnter");
}

function handleDragLeave(e) {
    log.info( "Entering handleDragLeave");
    this.classList.remove('over'); // this / e.target is previous target element.
    log.info( "Leaving handleDragLeave");
}

function sendBackward() {
   log.info( "Entering sendBackward");
   var activeObjectVal = canvas.getActiveObject();
   if (activeObjectVal) {
      canvas.sendBackwards(canvas.getActiveObject(), true);
   }
   $('#contextMenu').remove();
   contextmenuon = false;
   activeObject = false;
   canvas.deactivateAll().renderAll();
   log.info( "Leaving sendBackward");
}

function sendToBack() {
   log.info( "Entering sendToBack");
   var activeObjectVal = canvas.getActiveObject();
   if (activeObjectVal) {
      canvas.sendToBack(canvas.getActiveObject());
   }
   $('#contextMenu').remove();
   contextmenuon = false;
   activeObject = false;
   canvas.deactivateAll().renderAll();
   log.info( "Leaving sendToBack");
}

function bringFoward() {
   log.info( "Entering bringFoward");
   var activeObjectVal = canvas.getActiveObject();
   if (activeObjectVal) {
      canvas.bringForward(activeObjectVal);
   }
   $('#contextMenu').remove();
   contextmenuon = false;
   activeObject = false;
   canvas.deactivateAll().renderAll();
   log.info( "Leaving bringFoward");
}

function bringToFront() {
   log.info( "Entering bringToFront");
   var activeObjectVal = canvas.getActiveObject();
   if (activeObjectVal) {
      canvas.bringToFront(activeObjectVal);
   }
   $('#contextMenu').remove();
   contextmenuon = false;
   activeObject = false;
   canvas.deactivateAll().renderAll();
   log.info( "Leaving bringToFront");
}

function lineDown(data,index) {
  lineobject.lineDown(data,index);
}

function lineArrowTwoDown(data,index) {
   customlinetwoarrow.lineArrowTwoDown(data,index);
}

function circleDown(data,index) {
   circleobject.circleDown(data,index);
}

function handleDrop(e) {
   log.info( "Entering handleDrop");
   $("#saveMessage").text('Changes Made, Save Pending...');
   var img = document.querySelector('#images img.img_dragging');
   console.log(img);
   img.height = img.height;
   img.width = img.width;
   log.trace("Draggable Stage:", img);
   var draggy = "";
   if (e.stopPropagation) {
      e.stopPropagation(); // stops the browser from redirecting.
   }

   if (!(img == null)) {
      var imgsrc_val = img.getAttribute("img_val");
      log.debug("imgsrc_val: ", imgsrc_val)
      if (imgsrc_val == "line.png")
      {
         lineobject.lineDrop(e,id);
      } else if (imgsrc_val == "line_arrow_icon.png") {
          customlinearrow.linearrowdrop(e,id);
      } else if (imgsrc_val == "line_arrow_two_icon.png") {
        customlinetwoarrow.lineDrop(e, id);
      } else if (imgsrc_val == "circle_icon.png") {
        circleobject.circledrop(e, id);
      } else if (imgsrc_val == "ellipse_icon.png") {
        ellipseobject.ellipsedrop(e,id);
      } else if (imgsrc_val == "rectangle-icon.png") {
        rectobject.rectdrop(e, id);
      } else if (imgsrc_val == "textbox_icon.png") {
         log.debug("In textbox_icon.png section");
         var textbox = new fabric.IText('Tap and Type', {
             fontFamily: 'arial black',
             fontSize: 12,
             left: e.layerX,
             top: e.layerY
         });
         textbox.hasBorders = textbox.hasControls = true
         textbox.id = itemId
         itemId = itemId + 1;
         canvas.add(textbox);
         textbox.on("mousedown", function(data, index) { textobject.textDown(data,index); });
      } else {
         log.debug("In drag down else category")
         var newImage = new fabric.CustomImage(img, {
            width: img.width,
            height: img.height,
            left: e.layerX,
            top: e.layerY,
            config: 'undefined',
            origloc: 'undefined'
         });

         if(img.hasAttribute('data-config')) {
           log.debug("Has data-config")
           newImage.configdbid = img.getAttribute('data-config')
           log.debug("data-config: ", newImage.configdbid);
         } else {
           newImage.configdbid = false;
         }
         if(img.hasAttribute('data-model')) {
           log.debug("Has data-model")
           newImage.model = img.getAttribute('data-model')
           log.debug("data-model: ", newImage.model);
         } else {
           newImage.model = false;
         }
         if(img.hasAttribute('data-loc')) {
           log.debug("Has data-loc")
           newImage.origloc = img.getAttribute('data-loc')
           log.debug("data-loc: ", newImage.origloc);
         } else {
           newImage.origloc = false;
         }
         newImage.id = itemId
         newImage.setSrc("/assets/" + newImage.origloc,
                  function(obj) {
                    log.debug("Object");
                    log.debug("In callback for setSrc function");
                    log.trace(obj);
                  },
                  {
                    'height':img.height,
                    'width':img.width
                  });
         newImage.setCoords();
         log.debug("--- newImage.src ------");
         log.debug("src:",newImage.getSrc());
         log.debug("Height",newImage.getHeight());
         log.debug("Width", newImage.getWidth());
         itemId = itemId + 1;
         newImage.on("mousedown", function(data, index) { imageobject.imageDown(data,index); });
         canvas.add(newImage);
         canvas.renderAll();

      }
      this.classList.remove('over');
      onSave();
      return false;
   }
   onSave();
   log.info( "Leaving handleDrop");
}

function contextMenu(env) {
   log.info( "Entering contextMenu");
   var x = env.offsetX;
   var y = env.offsetY;
   $.each (canvas._objects, function(i, e) {
   // e.left and e.top are the middle of the object use some "math" to find the outer edges
     var d = e.width / 2;
     var h = e.height / 2;
     if (x >= (e.left - d) && x <= (e.left+d)) {
        if(y >= (e.top - h) && y <= (e.top+h)) {
           return false; //in case the icons are stacked only take action on one.
        }
     }
   });
   log.info( "Leaving contextMenu");
   return false; //stops the event propigation
}

function menus(items, event) {
   log.info( "Entering menus");
   var $contextMenu = "";
   if (contextmenuon == false) {
      var menucontainer = document.createElement('div');
      menucontainer.id = 'contextMenu';
      var html = "<ul class='dropdown-menu' role='menu' style='display:block;position:static;' >";
      for (index=0; index < items.length; index++) {
         html += "<li> <a tabindex=''-1'>" + items[index] + "</a> </li>";
      }
      html += "</ul>" ;

      menucontainer.innerHTML = html;
      //$('body').append(menucontainer);
      $('#mpc_holder').append(menucontainer);
      //$('#contextmenuholder').append(menucontainer);
      $contextMenu = $("#contextMenu");
      $contextMenu.css({
         display: "block",
         left: event.pageX,
         top: event.pageY
       });

   } else {
     log.info("Menu Not Displayed contextmenu is true");
   }
   log.info( "Leaving menus");
};

function textmenus(items, event) {
   log.info( "Entering textmenus");
   var $contextMenu = "";
   if (contextmenuon == false) {
      var menucontainer = document.createElement('div');
      menucontainer.id = 'contextMenu';
      var html = "<ul class='dropdown-menu' role='menu' style='display:block;position:static;' >";
      for (index=0; index < items.length; index++) {
         html += "<li> <a tabindex=''-1'>" + items[index] + "</a> </li>";
      }
      html+= '<li role="separator" class="divider"></li>'
      html+='<li class="dropdown dropdown-submenu"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Font Size</a>'
      html+='   <ul class="dropdown-menu sub-menu">'
      html+="     <li><a tabindex=''-1'>Large</a></li>"
      html+="     <li><a tabindex=''-1'>Medium</a></li>"
      html+="     <li><a tabindex=''-1'>Small</a></li>"
      html+="   </ul>"
      html+="</li>"
      html+='<li class="dropdown dropdown-submenu"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Font Family</a>'
      html+='   <ul class="dropdown-menu sub-menu">'
      html+="     <li><a tabindex=''-1'>Arial</a></li>"
      html+="     <li><a tabindex=''-1'>Sans-Serif</a></li>"
      html+="     <li><a tabindex=''-1'>Rockwell</a></li>"
      html+="   </ul>"
      html+="</li>"
      html += "</ul>" ;

      menucontainer.innerHTML = html;
      $('body').append(menucontainer);
      $contextMenu = $("#contextMenu");
      $contextMenu.css({
         display: "block",
         left: event.pageX,
         top: event.pageY
       });

   } else {
     log.info("Menu Not Displayed contextmenu is true");
   }
   log.info( "Leaving textmenus");
};

function handleDragEnd(e) {
   log.info( "Entering handleDragEnd");
   // this/e.target is the source node.
   [].forEach.call(images, function (img) {    img.classList.remove('img_dragging');  });
   log.info( "Leaving handleDragEnd");
};

function drawAsPNG(){
    log.info( "Entering drawAsPNG");
    canvas.isDrawingMode = false;

    if(!window.localStorage){alert("This function is not supported by your browser."); return;}
    // to PNG
    window.open(canvas.toDataURL('png'));
    log.info( "Leaving drawAsPNG");
};

function getItemIndex(object) {
     log.info( "Entering getItemIndex");
     id = object.id;
     index = 0;
     objectList = canvas.getObjects();
     for (i = 0; i < objectList.length; i++) {
       if (objectList[i].id == id) {
         index = i
       }
     }
     log.info( "Leaving getItemIndex");
     return index;
}

 function calcArrowAngle(x1, y1, x2, y2) {
        var angle = 0,
            x, y;

        x = (x2 - x1);
        y = (y2 - y1);

        if (x === 0) {
            angle = (y === 0) ? 0 : (y > 0) ? Math.PI / 2 : Math.PI * 3 / 2;
        } else if (y === 0) {
            angle = (x > 0) ? 0 : Math.PI;
        } else {
            angle = (x < 0) ? Math.atan(y / x) + Math.PI : (y < 0) ? Math.atan(y / x) + (2 * Math.PI) : Math.atan(y / x);
        }

        return (angle * 180 / Math.PI);
    }
