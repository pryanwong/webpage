<!doctype html>
<html>
   <head>
     <meta charset="utf-8">
   <%= javascript_include_tag 'jquery-2.1.3.min' %>
   <%= javascript_include_tag 'jscolor' %>
   <%= stylesheet_link_tag "https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/themes/smoothness/jquery-ui.css" %>
   <%= stylesheet_link_tag 'contextmenu_orig' %>
   <%= javascript_include_tag 'jquery-ui' %>
   <%= javascript_include_tag 'fabric' %>
   <%= javascript_include_tag 'fabric.canvasex' %>
   <%= javascript_include_tag "https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.js" %>
	 <script>
       $(function() {
          $( "#accordion" ).accordion();
		  //$("#accordion").accordion({ event: "mouseover" });
       });
     </script>
     <title>Title of the document</title>
   </head>
   <body  id="body"  oncontextmenu="return false;">

      <div class="hide" id="info">
      </div>
	  <div class="hide" id="TextFormDiv">
	     <form id="TextForm" autocomplete="off"><TEXTAREA id="textBoxMultiline" COLS=40 ROWS=2></TEXTAREA>
		   <input id="activeTextObjectId"/>
           <br>
           <input type="submit" value="Submit"><input type="button" name="cancel" value="Cancel" onClick="textcancel()"/>
         </form>
	  </div>
	  <div class="hide" id="LabelFormDiv">
	     <form id="LabelForm" autocomplete="off"><input id="textBox" placeholder="your text" autocomplete="off"/>
		   <input id="activeObjectId"/>
           <br>
           <input type="submit" value="Submit"><input type="button" name="cancel" value="Cancel" onClick="labelcancel()"/>
         </form>
	  </div>
	  <div id="inputs">
	  </div>
      <div id="menubar">
       <%= image_tag "paint_bucket.png" %>
	     <input id="myColor" class="color {pickerClosable:true}" onchange=colorPickerChange('#'+this.color) style="width:2em;" value="000000">
       <%= image_tag "FastText.png" %>
		   <input id="myFontColor" class="color {pickerClosable:true}" onchange=myFontColor('#'+this.color) style="width:2em;" value="000000">
	  </div>
    <div style="width:225px;position:absolute;left:0">
      <div id="accordion" style="width:225px">
         <h3>Cameras</h3>
         <div style="margin:0px;padding:0px;">
            <!-- <canvas id="cameras" width="160" height="400" style="border:1px solid #000000;"></canvas> -->
            <div id="images">
              <table>
               <tr>
                 <td>
                   <%= image_tag "IED.png", :img_val=>"IED.png", :draggable=>"true", :width=>"71", :height => "34" %>
                   <figcaption>IED</figcaption>
                 </td>
                 <td>
                   <%= image_tag "esprit_cam.png", :img_val=>"esprit_cam.png", :draggable=>"true", :width=>"71", :height => "34" %>
                   <figcaption>Esprit Cam</figcaption>
                 </td>
               </tr>
               <tr>
                 <td>
                   <%= image_tag "Switch.png", :img_val=>"Switch.png", :draggable=>"true", :width=>"108", :height => "75" %>
                   <figcaption>Switch</figcaption>
                 </td>
                 <td>
                   <%= image_tag "GE_WiYZ.png", :img_val=>"GE_WiYZ.png", :draggable=>"true", :width=>"72", :height => "83" %>
                   <figcaption>WiYZ</figcaption>
                 </td>
               </tr>
               <tr>
                 <td>
                   <%= image_tag "line.png", :img_val=>"line.png", :draggable=>"true", :width=>"22", :height => "39" %>
                   <figcaption>Line</figcaption>
                 </td>
                 <td>
                   <%= image_tag "textbox_icon.png", :img_val=>"textbox_icon.png", :draggable=>"true", :width=>"60", :height => "32" %>
                   <figcaption>Text Box</figcaption>
                 </td>
               </tr>
             </table>
            </div>
         </div>
         <h3>Networking</h3>
         <div style="margin:0px;padding:0px;">
         </div>
         <h3>Shapes</h3>
         <div style="margin:0px;padding:0px;">
         </div>
     </div>
   </div>
     <div id="div2" style="position:absolute;left:230px">
       <div id="canvas-container">
        <canvas id="demoCanvas2" width="1000" height="800"></canvas>
      </div>
     </div>
     <script>
        var handler = "";
        var objId = 0;
        var contextmenuon = false;
        var activeObject = false;
        var activeObjectVal = "";
        var activeLineGroup = null;
        var objectName = "";
        var _curX, _curY;
        var canvas = new fabric.CanvasEx('demoCanvas2');
        canvas.on('mouse:over', function(e) {
           e.target.setOpacity(0.5);
           activeObject = true;
           activeObjectVal = e.target;
           canvas.renderAll();
        });

        canvas.on('object:selected', function(e) {
           //find the selected object type
           console.log("object:selected starting")
           console.log(e.target)
           var objType = e.target.get('type');
           if (objType == 'line') {
             console.log("object:selected removing circles")
             _curX = e.e.clientX;
             _curY = e.e.clientY;

             console.log("_curX: " + _curX);
             console.log("_curY: " +_curY);
             e.target.c1.remove();
             e.target.c2.remove();
             canvas.renderAll();
           }

        });

        canvas.on('mouse:up', function(e) {
            console.log("In mouse:up")
            if(e.target) {
              console.log("Target")
              console.log(e.target)
              if('type' in e.target) {
                if(e.target.type == "line") {
                  makeCircle(e.target)
                  e.target.c1 = c[0];
                  e.target.c2 = c[1];
                  canvas.add(c[0],c[1]);
                }
              }
           }
        })

        canvas.on('mouse:down', function(e) {
            console.log("In Canvas On Mouse:down")
            handler =""
            $('#glossymenu').remove();
            contextmenuon = false;
            if(e.target) {
              console.log("Target")
              console.log(e.target)
              if('type' in e.target) {
                if(e.target.type == "line") {
                  if (e.target.c1) {
                    e.target.c1.remove();
                    e.target.c2.remove();
                    canvas.renderAll();
                  }
                }
              }
            }
        });

        canvas.on('mouse:out', function(e) {
           console.log("Mouse:out")
           console.log(e.target)
           e.target.setOpacity(1);
           canvas.renderAll();
           activeObject = false;
           objectName ="";

        });


        canvas.on('object:moving', function(e) {
           var p = e.target;
           console.log("Event")
           console.log(e);
           if(p.type == 'circle1') {
              p.line && p.line.set({ 'x2': p.left, 'y2': p.top });
              p.line.setCoords();
           }
           if(p.type == 'circle0') {
              p.line && p.line.set({ 'x1': p.left, 'y1': p.top });
              p.line.setCoords();
           }
           canvas.renderAll();

           if(e.target.type == 'line') {
             var _curXm = (_curX - e.e.clientX);
             var _curYm = (_curY - e.e.clientY);
             console.log("moved: " + _curXm);
             console.log("moved: " + _curYm);
             e.target.c1.set({ 'left' : e.target.c1.left - _curXm, 'top' : e.target.c1.top - _curYm });
             e.target.c2.set({ 'left' : e.target.c2.left - _curXm, 'top' : e.target.c2.top - _curYm  });
             e.target.set({ 'x1': e.target.c1.left, 'y1': e.target.c1.top });
             e.target.set({ 'x2': e.target.c2.left, 'y2': e.target.c2.top });
             e.target.c2.setCoords();
             e.target.c1.setCoords();
             e.target.setCoords();
             canvas.renderAll();
           }
           //p.line2.setCoords();
           //p.line1.setCoords();

           _curX = e.e.clientX;
           _curY = e.e.clientY;
        });

        // canvas moving limit

        canvas.observe("object:moving", function(e){
          //alert("oval moving");
          var obj = e.target;
          // if object is too big ignore
          console.log("In canvas.observe object.moving")
          console.log(obj)
          var halfw = obj.width/2;
          var halfh = obj.height/2;
          var posBottom = obj.top + obj.height;
          var posRight = obj.left + obj.width;

          var bounds = {tl: {x: halfw, y:halfh},
            br: {x: canvas.width , y: canvas.height }
          };
          // top-left  corner

            // alert("text");
          if(obj.top < bounds.tl.y || obj.left < bounds.tl.x){
            console.log("In first canvas.observe if")
            obj.top = Math.max(obj.top, '0'  );
            obj.left = Math.max(obj.left , '0' )
            obj.setCoords();
            console.log(obj);

          }



        // bot-right corner
        if(posBottom > bounds.br.y || posRight > bounds.br.x ){
            console.log("In second canvas.observe if")
            obj.top = Math.min(posBottom, bounds.br.y  ) - obj.height;
            obj.left = Math.min(posRight, bounds.br.x ) - obj.width;
            obj.setCoords();
        }

        // top-right corner case
        if (obj.top < bounds.tl.y && posRight > bounds.br.x) {
          console.log("In third canvas.observe if")
          obj.top = Math.max(obj.top, '0'  );
          obj.left = Math.min(posRight, bounds.br.x ) - obj.width;
          obj.setCoords();
        }

        // bottom-left corner case
        if (posBottom > bounds.br.y && obj.left < bounds.tl.x) {
          console.log("In fourth canvas.observe if")
          obj.top = Math.min(posBottom, bounds.br.y  ) - obj.height;
          obj.left = Math.max(obj.left , '0' )
          obj.setCoords();
        }
        });

       function handleDragStart(e) {
         [].forEach.call(images, function (img) {
           img.classList.remove('img_dragging');
         });
         this.classList.add('img_dragging');
       }

       function makeLine(coords, id) {
           return new fabric.Line(coords, {
             fill: 'red',
             stroke: 'red',
             strokeWidth: 5,
             selectable: true,
             perPixelTargetFind: true,
             objId: id,
             type: 'line'
           });
         }

         function activateColorPicker(e) {
              var activeObject = e.target;
              document.getElementById('myColor').color.showPicker();
         }

         function colorPickerChange(newLineColor) {
              if (activeObjectVal) {
                if (activeObjectVal.type) {
                  if (activeObjectVal.type == "line") {
                    activeObjectVal.fill = newLineColor;
                    activeObjectVal.stroke = newLineColor;
                  }
                }
              }
         }

         function makeCircle(line) {
             var c1 = new fabric.Circle({
               left: line.get('x1'),
               top: line.get('y1'),
               strokeWidth: 2,
               radius: 3,
               fill: '#fff',
               stroke: '#666',
               belongsTo: line.objId,
               objId: line.objId + 1,
               type: 'circle0'
             });
             c1.hasControls = c1.hasBorders = false;
             c1.visible = true;
             var c2 = new fabric.Circle({
               left: line.get('x2'),
               top: line.get('y2'),
               strokeWidth: 2,
               radius: 3,
               fill: '#fff',
               stroke: '#666',
               belongsTo: line.objId,
               objId: line.objId + 2,
               type: 'circle1'
             });
             c2.hasControls = c2.hasBorders = false;
             c2.visible = true;
             c1.line = line;
             c2.line = line;
             line.c1 = c1;
             line.c2 = c2;
             console.log("Done Circles");
             var c = new Array(c1, c2);
             console.log(c);
             return c;
         }

function handleDragOver(e) {
    if (e.preventDefault) {
        e.preventDefault(); // Necessary. Allows us to drop.
    }

    e.dataTransfer.dropEffect = 'copy'; // See the section on the DataTransfer object.
    // NOTE: comment above refers to the article (see top) -natchiketa

    return false;
}

function handleDragEnter(e) {
    // this / e.target is the current hover target.
    this.classList.add('over');
}

function handleDragLeave(e) {
    this.classList.remove('over'); // this / e.target is previous target element.
}

function handleDrop(e) {
   var img = document.querySelector('#images img.img_dragging');
   console.log("Draggable Stage:")
   var draggy = "";
   console.log(img);

    // this / e.target is current target element.

    if (e.stopPropagation) {
        e.stopPropagation(); // stops the browser from redirecting.
    }

    if (!(img == null)) {
      console.log('event: ', e);
      console.log("Image Variable")
      var imgsrc_val = img.img_val
      console.log(imgsrc_val)
      console.log(img);
      if (imgsrc_val == "line.png")
      {
        objectName = "line";
        var xpos1 = e.layerX;
        var ypos1 = e.layerY;
        var xpos2 = xpos1 + 25;
        var ypos2 = ypos1 + 25;
        var line = makeLine([ xpos1, ypos1, xpos2, ypos2 ])
        line.hasBorders = line.hasControls = false
        canvas.add(line)
        c = makeCircle(line);
        line.c1 = c[0];
        line.c2 = c[1];
        canvas.add(c[0],c[1]);
        line.on("mousedown", function(data, index) {
          if (handler != "") {
    	       document.removeEventListener('contextmenu', handler);
    	    }

          if (data.e.which == 3) {
            console.log("In mouse down Image")
            handler = function(e) {
            console.log("Entering handler function");
            console.log("contextmenuon =" + contextmenuon);
            console.log(activeObjectVal)
            if (contextmenuon == false &&  activeObject == true) {
                      e.preventDefault();
               var items = ["Delete", "Change Color", "Copy"];
               menus(items, e);
               $('a:contains("Delete")').click(  function() {console.log("In Delete");
                                                             var activeObject = canvas.getActiveObject();
                                                             console.log(activeObjectVal);
                                                             canvas.remove(activeObjectVal.c1)
                                                             canvas.remove(activeObjectVal.c2)
                                                             canvas.remove(activeObjectVal);
                                                             $('#glossymenu').remove();
                                                             contextmenuon = false;
                                                             activeObject = false;}   );
               $('a:contains("Change Color")').click(function() {activateColorPicker(e);});
               $('a:contains("Copy")').click(function() {p.copyObject(e);});
               contextmenuon = true;
            };
          }

          document.addEventListener('contextmenu', handler, false);
        }

       });

     } else if (imgsrc_val == "textbox_icon.png") {
        console.log("Hello!!!")
        var textbox = new fabric.IText('Tap and Type', {
              fontFamily: 'arial black',
              fontSize: 12,
              left: e.layerX,
              top: e.layerY
        });
        textbox.hasBorders = textbox.hasControls = true
        canvas.add(textbox);
        console.log(textbox);
        canvas.on("mousedown", function(data, index) {
          if (handler != "") {
    	       document.removeEventListener('contextmenu', handler);
    	    }

          if (data.e.which == 3) {
            console.log("In mouse down Image")
            handler = function(e) {
            console.log("Entering handler function");
            console.log("contextmenuon =" + contextmenuon);
            console.log(activeObjectVal)
            if (contextmenuon == false &&  activeObject == true) {
                      e.preventDefault();
               var items = ["Delete", "Change Label", "Copy"];
               menus(items, e);
               $('a:contains("Delete")').click(  function() {console.log("In Delete");
                                                             var activeObject = canvas.getActiveObject();
                                                             console.log(activeObjectVal);
                                                             canvas.remove(activeObjectVal);
                                                             $('#glossymenu').remove();
                                                             contextmenuon = false;
                                                             activeObject = false;}   );
               $('a:contains("Change Label")').click(function() {p.changeLabel(e);});
               $('a:contains("Copy")').click(function() {p.copyObject(e);});
               contextmenuon = true;
            };
          }

          document.addEventListener('contextmenu', handler, false);
        }

       });
      } else {

        var newImage = new fabric.Image(img, {
          width: img.width,
          height: img.height,
          // Set the center of the new object based on the event coordinates relative
          // to the canvas container.
          left: e.layerX,
          top: e.layerY
        });
        console.log(newImage);
        canvas.add(newImage);
        newImage.on("mousedown", function(data, index) {
         //handle right click

        //stop showing browser menu
        console.log("Clicked on object #"+index)
        console.log(data.e.which)
        console.log(data);
        console.log(this);
        if (handler != "") {
    	       document.removeEventListener('contextmenu', handler);
    	  }

        if (data.e.which == 3) {
            console.log("In mouse down Image")
            handler = function(e) {
            console.log("Entering handler function");
            console.log("contextmenuon =" + contextmenuon);
            if (contextmenuon == false &&  activeObject == true) {
                      e.preventDefault();
               var items = ["Delete", "Change Label", "Copy"];
               menus(items, e);
               $('a:contains("Delete")').click(  function() {console.log("In Delete");
                                                             var activeObject = canvas.getActiveObject();
                                                             console.log(activeObjectVal);
                                                             canvas.remove(activeObjectVal);
                                                             $('#glossymenu').remove();
                                                             contextmenuon = false;
                                                             activeObject = false;}   );
               $('a:contains("Change Label")').click(function() {p.changeLabel(e);});
               $('a:contains("Copy")').click(function() {p.copyObject(e);});
               contextmenuon = true;
            };
          }

          document.addEventListener('contextmenu', handler, false);
        }

      });

    }
    this.classList.remove('over');
    return false;

  }
}

function contextMenu(env) {
  var x = env.offsetX;
  var y = env.offsetY;
  $.each (canvas._objects, function(i, e) {
      // e.left and e.top are the middle of the object use some "math" to find the outer edges
      var d = e.width / 2;
      var h = e.height / 2;
      if (x >= (e.left - d) && x <= (e.left+d)) {
          if(y >= (e.top - h) && y <= (e.top+h)) {
              console.log("clicked canvas obj #"+i);
              //TODO show custom menu at x, y
              return false; //in case the icons are stacked only take action on one.
          }
      }
  });
  return false; //stops the event propigation
}

function menus(items, event) {
        $('#body').append("<div id='glossymenu' class='glossymenu'>");
	    $('#glossymenu').append("<ul id='ulglossymenu'>");
		for (index=0; index < items.length; index++) {
	         $('#ulglossymenu').append("<li> <a>" + items[index] + "</a> </li>");
	    }
		$('#glossymenu').append("</ul>");
		$('#body').append("</div>");
		console.log("Menu Position");
		console.log(event);
		var posY = event.layerY + "px";
		var posX = event.layerX + "px";
		console.log("PosX : " + event.layerX);
		console.log("PosY : " + event.layerY);
		$('#glossymenu').css('top',posY);
        $('#glossymenu').css('left',posX);
};

function handleDragEnd(e) {
    // this/e.target is the source node.
    [].forEach.call(images, function (img) {
        img.classList.remove('img_dragging');
    });
}

if (Modernizr.draganddrop) {
    // Browser supports HTML5 DnD.

    // Bind the event listeners for the image elements
    var images = document.querySelectorAll('#images img');
    [].forEach.call(images, function (img) {
        img.addEventListener('dragstart', handleDragStart, false);
        img.addEventListener('dragend', handleDragEnd, false);
    });
    // Bind the event listeners for the canvas
    var canvasContainer = document.getElementById('canvas-container');
    canvasContainer.addEventListener('dragenter', handleDragEnter, false);
    canvasContainer.addEventListener('dragover', handleDragOver, false);
    canvasContainer.addEventListener('dragleave', handleDragLeave, false);
    canvasContainer.addEventListener('drop', handleDrop, false);
} else {
    // Replace with a fallback to a library solution.
    alert("This browser doesn't support the HTML5 Drag and Drop API.");
}
     </script>
   </body>
</html>
