%div{ :id=>"spinner", :class=>"spinner"}
   %div{ :class=>"rect1"}
   %div{ :class=>"rect2"}
   %div{ :class=>"rect3"}
   %div{ :class=>"rect4"}
   %div{ :class=>"rect5"}

%div{:id=>"breadcrumbs", :class=>"container"}
   %div
      %div
         %ol{:class=>"breadcrumb"}
            %li{:class=>"hidden-sm hidden-xs"}
               = link_to company_user_path(current_user.company_id ,current_user.id) do
                  =t('.home')
            %li{:class=>"hidden-sm hidden-xs"} #{t('.png')}
= javascript_include_tag 'jquery-ui'

%div{:id=>"main", :class=>"container", :style=>"padding-top: 20px"}
   %div{:class=>"img-rounded",:style=>"width:1000;height:1000;background:white;padding-bottom:10px;overflow:auto"}
      %canvas{:id=>"demoCanvas2", :width=>"1000", :height=>"1600", :style=>"border: 1px solid black;"}

=javascript_include_tag "app/angular.js"
=javascript_include_tag "app/ui-bootstrap-tpls-2.3.0.js"
=javascript_include_tag "app/angular-animate.js"
=javascript_include_tag "app/angular-resource.js"
=javascript_include_tag "app/app.js", "data-turbolinks-track" => true
=javascript_include_tag "app/modalController.js", "data-turbolinks-track" => true
=javascript_include_tag "app/modalprodconfigController.js", "data-turbolinks-track" => true
=javascript_include_tag "app/iconDirective.js", "data-turbolinks-track" => true
=javascript_include_tag "app/backgroundbuttonDirective.js", "data-turbolinks-track" => true
=javascript_include_tag "app/iconTableDirective.js", "data-turbolinks-track" => true
=javascript_include_tag "app/versionsDirective.js", "data-turbolinks-track" => true
=javascript_include_tag "app/iconController.js", "data-turbolinks-track" => true
=javascript_include_tag "app/productService.js", "data-turbolinks-track" => true
=javascript_include_tag "app/contextmenuDirective.js", "data-turbolinks-track" => true
:javaScript
   var handler = "";
   var c = new Array();
   var objId_var = 0;
   var company_id ='#{params[:company_id]}'
   var user_id= '#{params[:user_id]}'
   var drawing_id = '#{params[:id]}'
   var itemId = 0;
   var contextmenuon = false;
   var activeObject = false;
   var activeObjectVal = "";
   var activeLineGroup = null;
   var backgroundImageVal = "";
   var objectName = "";
   var canvas = new fabric.CanvasEx('demoCanvas2');
   document.getElementById("demoCanvas2").fabric = canvas;
   var fabric = fabric || { version: "1.4.13" };
   var motionInbounds = true;
   var lineActive = true;
   var lineSelected = false;
   var log = log4javascript.getDefaultLogger();
   var progressBar  = $("<div class='bar'></div>");
   var barContainer = $("<div class='progress'></div>").append(progressBar);
   var image = new Image();
   log4javascript.setEnabled(false);

   function GetDebugParameter(sParam){
       log.info( "Entering  GetDebugParameter");
       var sPageURL = window.location.hash;
       log.debug("sPageURL:");
       log.debug( sPageURL);
       sPageURL = sPageURL.split("?");
       if (sPageURL.length > 1) {
          var sURLVariables = sPageURL[1].split('&');
          log.debug("sURLVariables:");
          log.debug( sURLVariables);
          for (var i = 0; i < sURLVariables.length; i++)
          {
             var sParameterName = sURLVariables[i].split('=');
             log.debug("sParameterName:")
             log.debug(sParameterName);
             if (sParameterName[0] == sParam)
             {
               log.debug("sParameterName[1]:")
               log.debug(sParameterName[1]);
               log.info( "Leaving GetDebugParameter");
               return sParameterName[1];
             }
          }
       } else {
         log.info( "Leaving GetDebugParameter returning false");
         return false;
       }
   };

   var debugOn = GetDebugParameter('debug');
   log4javascript.setEnabled(debugOn);
   log.setLevel(log4javascript.Level.TRACE);
   log.info("Executing javascript in edit.html");
   log.debug("Executing spinner");
   $(".spinner").show();
   canvas.backgroundColor="#FFFFFF";

   log.debug("Create Custom Image Class");
   fabric.CustomImage = fabric.util.createClass(fabric.Image, {
      type: 'custom-image',
      initialize: function(element, options) {
          this.callSuper('initialize', element, options);
          options && this.set('model', options.model);
          options && this.set('config', options.config);
          options && this.set('origloc', options.origloc);
          options && this.set('price', options.price);
          options && this.set('configdbid', options.configdbid);
      },
      toObject: function() {
          return fabric.util.object.extend(this.callSuper('toObject'),
                                        {config: this.config,
                                         price:  this.price,
                                         model:  this.model,
                                         origloc: this.origloc,
                                         configdbid: this.configdbid});
      },
      setConfig: function(configString) {
         this.config = configString;
         canvas.trigger('custom-image:textChange');
      },
      _render: function(ctx) {
         this.callSuper('_render', ctx);
         if (this.config != 'undefined') {
           log.debug("In Call Super Render, ctx")
           log.trace(ctx)
           ctx.font = '12px Helvetica';
           ctx.fillStyle = '#333';
           log.debug("render text");
           textwidth = ctx.measureText(this.config).width
           ctx.fillText(this.config, -textwidth/2, (this.height/2+10))
         }
      }
   });
   fabric.CustomImage.fromObject = function(object, callback) {
    fabric.util.loadImage(object.src, function(img) {
      callback && callback(new fabric.CustomImage(img, object));
     });
   };
   fabric.CustomImage.async = true;

   log.debug("Create Custom Line Class");
   fabric.Customline = fabric.util.createClass(fabric.Line, {
     type: 'customline',
     initialize: function(coords, options) {
         options || (options = {});
         this.callSuper('initialize', coords ,options);
         options && this.set('objId', options.objId);
         options && this.set('cone', options.cone);
         options && this.set('ctwo', options.ctwo);
     },
     toObject: function() {
         return fabric.util.object.extend(this.callSuper('toObject'),
                                       {objId: this.objId,
                                        cone:    this.cone,
                                        ctwo:    this.ctwo});
     },
     setObjId: function(objIdString) {
        this.objId = objIdString;
     },
     getObjId: function() {
        return this.objId;
     },
     setCone: function(c1String) {
        this.cone = c1String;
     },
     setCtwo: function(c2String) {
        this.ctwo = c2String;
     },
      _render: function(ctx) {
         this.callSuper('_render', ctx);
      }
   });
   fabric.Customline.fromObject = function (object) {
     return new fabric.Customline([object.x1,object.y1,object.x2,object.y2], object);
   };
   fabric.Customline.async = false;

   log.debug("Create Custom Circlezero Class");
   fabric.Circlezero = fabric.util.createClass(fabric.Circle, {
    type: 'circlezero',
    initialize: function(element, options) {
        this.callSuper('initialize', element, options);
        options && this.set('belongsTo', options.belongsTo);
    },
    toObject: function() {
        return fabric.util.object.extend(this.callSuper('toObject'),
                                      {belongsTo: this.belongsTo});
    },
    setBelongsTo: function(belongsToString) {
       this.belongsTo = belongsToString;
    },
    _render: function(ctx) {
       this.callSuper('_render', ctx);
    }
   });
   fabric.Circlezero.fromObject = function(object) {
     return new fabric.Circlezero(object);
   };
   fabric.Circlezero.async = false;

   log.debug("Create Custom Circleone Class");
   fabric.Circleone = fabric.util.createClass(fabric.Circle, {
   type: 'circleone',
   initialize: function(element, options) {
       this.callSuper('initialize', element, options);
       options && this.set('belongsTo', options.belongsTo);
   },
   toObject: function() {
       return fabric.util.object.extend(this.callSuper('toObject'),
                                     {belongsTo: this.belongsTo});
   },
   setBelongsTo: function(belongsToString) {
      this.belongsTo = belongsToString;
   },
   _render: function(ctx) {
      this.callSuper('_render', ctx);
   }
   });
   fabric.Circleone.fromObject = function(object) {
     return new fabric.Circleone(object);
   };
   fabric.Circleone.async = false;

   log.debug("Load window twice, there is a bug in canvas/fabric that this addresses");
   if(!window.location.hash) {
       window.location = window.location + '#loaded';
       window.location.reload();
   }else{
       log.debug("Load Drawing");
       var data_drawing = "";
       if (parseInt("#{@drawing.drawing.length}") > 0) {
            log.debug("drawing loaded");
            data_drawing = #{ raw(@drawing.drawing) }
       } else {
            log.debug("no drawing loaded");
            data_drawing = ""
       }
       objId_var = 1;
       log.debug("load objects onto canvas");

       if (data_drawing != "") {
           log.debug("data_drawing not blank")
           canvas.loadFromJSON(data_drawing, function () {
              //first render
              canvas.renderAll.bind(canvas);
              var objs = canvas.getObjects().map(function(o) {
                return o.set('active', false);
              });
              log.debug("Entering loop for objects")
              log.debug("Loop size: ", objs.length)
              var foundCircle = 0;
              var itemId = 0;
              for(i = 0; i < objs.length; i++ ) {
                 log.debug("Objs Type: ", objs[i].type)
                 objs[i].id = itemId
                 if (objs[i].type == "customline")  {
                   console.log("customline: ", objs[i])
                   console.log("Item Id of line set to: ", objs[i].getObjId())
                   canvas.forEachObject(function(circleProspect){
                     log.debug("Object Type: ", circleProspect.type)
                     if (circleProspect.type == "circlezero" || circleProspect.type == "circleone") {
                        log.debug("circleProspect.belongsTo: ", circleProspect.belongsTo)
                        log.debug("objs[1].objId: ", objs[i].objId)
                     }
                     if (circleProspect.type == "circlezero" && circleProspect.belongsTo == objs[i].objId) {
                        circleProspect.hasBorders = circleProspect.hasControls = false;
                        circleProspect.line = objs[i]
                        circleProspect.belongsTo = itemId;
                        objs[i].cone = circleProspect
                        circleProspect.set('hoverCursor','crosshair')
                        console.log("found circlezero")
                        foundCircle = foundCircle + 1;

                     }
                     if (circleProspect.type == "circleone" && circleProspect.belongsTo == objs[i].objId) {
                       circleProspect.hasBorders = circleProspect.hasControls = false;
                       circleProspect.line = objs[i]
                       circleProspect.belongsTo = itemId;
                       objs[i].ctwo = circleProspect
                       circleProspect.set('hoverCursor','crosshair')
                       console.log("found circleone")
                       foundCircle = foundCircle + 1;
                     }
                     if (foundCircle == 2) {
                       console.log("objId: ", objs[i].get('objId'))
                       objs[i].setObjId(itemId)
                       itemId = itemId + 1;
                       objs[i].cone.id = itemId;
                       itemId = itemId + 1;
                       objs[i].ctwo.id = itemId;
                       foundCircle = 0;
                     }
                   });
                   objs[i].on("mousedown", function(data, index) { lineDown(data,index); });
                 }
                 itemId = itemId + 1;
              }
              canvas.renderAll();
              backgroundImageVal = "";
              console.log("Canvas: ", canvas)
              console.log("hasOwn: ", canvas.hasOwnProperty('backgroundImage'))
              console.log("background: ",canvas.backgroundImage)
              if (canvas.hasOwnProperty('backgroundImage')) {
                 if (canvas.backgroundImage !== null) {
                   if ((canvas.backgroundImage).hasOwnProperty('src') == true) {
                     backgroundImageVal = canvas.backgroundImage.src;
                   }
                 }
              }
              log.debug("BackgroundImage Loc: ", backgroundImageVal)
              image.src = canvas.toDataURL("image/png");
              $('#demoCanvas2').replaceWith(image);
           },
           postProcessLoading);

       }

       log.debug("load background object onto canvas");
       var center = canvas.getCenter();
       log.info( "Drawing should be loaded ");
       log.info( "Fade spinner out ");
       $(".spinner").fadeOut( 400 );
   }
