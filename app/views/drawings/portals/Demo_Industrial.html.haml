%div{"ng-controller"=>"IconController as vm"}
   %div{:class=>"hide", :id=>"LabelFormDiv"}
      %form{ :id=>"LabelForm", :autocomplete=>"off"}
         %input{ :id=>"textBox", :placeholder=>"your text", :autocomplete=>"off"}
         %input{ :id=>"activeObjectId"}
         %br
         %input{ :type=>"submit", :value=>"Submit"}
         %input{ :type=>"button", :name=>"cancel", :value=>"Cancel", :onClick=>"labelcancel()"}
   %div#inputs
   %div{:id=>"drawingwrap", :style=>"width:1500px"}
      %div{:id=>"breadcrumbs", :style=>"padding-left:230px;width:1230px", :class=>"hidden-sm hidden-xs"}
         %div
            %div
               %ol{:class=>"breadcrumb"}
                  %li{:class=>"hidden-sm hidden-xs"}
                     = link_to company_user_path(current_user.company_id ,current_user.id) do
                        =t('drawings.editdrawingdetails.home')
                  %li{:class=>"hidden-sm hidden-xs"} #{t('drawings.editdrawingdetails.drawings')}
                  %li{:class=>"pull-right"}
                     = link_to t('drawings.bom.billofmaterials'), bom_company_user_drawing_path(current_user.company_id ,current_user.id,  params[:id])
      %div#menubar{:sytle=>"width:1230px;height:75px;"}
         %span{"ng-controller"=>"ModalController as mc"}
            %div{:class=>"modal-demo"}
               %script{:type=>"text/ng-template", "id"=>"fileUploadContent.html"}
                  %div{:class=>"modal-header"}
                     %button{:type=>"button", :class=>"close", "data-dismiss"=>"modal", "ng-click"=>"mc.cancel()"} &times;
                     %h4{:class=>"modal-title"}Background Image
                  %div{:class=>"modal-body"}
                     = form_for(@drawing, :id=>"background_form",:url => updateBackground_company_user_drawing_path(params[:company_id], params[:user_id],params[:id]), html: { class: 'directUpload', data: { 'form-data' => (@presigned_post.fields), 'url' => @presigned_post.url, 'host' => URI.parse(@presigned_post.url).host } }) do |f|
                        %div{:class=>"input-group", :id=>"data"}
                           %label{ :class=>"input-group-btn"}
                              %span{:id=>"submitButton", :class=>"btn btn-primary", "ng-click"=>"mc.load()"}
                                 Browse&hellip;
                                 = f.file_field :background, :style=>"display: none;", :id=>"lefile", "file-change"=>"", "ng-model"=>"mc.file"
                           %input{:type=>"text",:id=>"backgroundfile", :name=>"file", :disabled=>true, :class=>"form-control", :value=>"{{mc.file.name}}"}
                     %div{:id=>"progress"}
                        %progress{:class=>"progress",:value=>"0",:max=>"100",:id=>"bar",:style=>"display:inline;"}0%
            %backgroundbutton-directive{"background"=>"", "open-modal"=>"mc.open()"}
            %button{:type=>"button", :class=>"btn btn-default", "ng-click"=>'vm.toggle_versions_pane();'}Archived Versions
         =image_tag "common/paint_bucket.png"
         %input{:id=>'myColor', :class=>'color {pickerClosable:true}', :onchange=>'colorPickerChange("#"+this.color, activeObjectVal)', :style=>'width:2em;', :value=>'000000'}
         -# =image_tag "common/FastText.png"
         -# %input{:id=>'myFontColor', :class=>'color {pickerClosable:true}', :onchange=>"myFontColor('#'+this.color)", :style=>'width:2em;', :value=>'000000'}
         Last Saved:
         %span{:id=>'saveMessage'}
            = @lastedit
      %div{:style=>"float:left;height:1000px;width:230px;padding-top:10px"}
         %div{:class=>"panel-group", :id=>"accordiontools", "ng-init"=>"vm.loadIcons(#{current_user.company_id})"}
            %div{ :class=>"panel panel-default", "ng-repeat"=>"vals in vm.jsonObj", "ng-cloak"=>true}
               %div.panel-heading
                  %h4.panel-title
                     %a{:data=> {:toggle=>"collapse",:parent=>"#accordiontools"}, :href=>"#collapse{{$index}}", "ng-click" => "vm.panelActive($index)"}
                        {{vals.name}}
                        %i{:class=>"pull-right glyphicon", "ng-class"=>"{'glyphicon-chevron-down': vm.panelStatus == $index, 'glyphicon-chevron-right': vm.panelStatus != $index}"}
               %div{:id=>"collapse{{$index}}", "ng-class"=>"$first ? 'panel-collapse collapse in' : 'panel-collapse collapse'"}
                  %div{:id=>"images",:class=>"panel-body"}
                     %table
                        %tr{"icon-directive"=>"pic", "ng-repeat"=>"pic in vals.icons"}
      %span{:id=>"mpc_holder", "ng-controller"=>"ModalProductConfigController as mpc" }
         %div{:class=>".product-config-modal"}
            %script{:type=>"text/ng-template", "id"=>"productConfigTmpl.html"}
               %div{:class=>"modal-header"}
                  %button{:type=>"button", :class=>"close", "data-dismiss"=>"modal", "ng-click"=>"mpc.cancel()"} &times;
                  %h4{:class=>"modal-title"}Product Configurator
               %div{"ng-hide"=>"mpc.jsonObjerror"}
                  %div{:class=>"modal-body"}
                     %div{:class=>"form-horizontal", :id=>"data"}
                        %div{:class=>"form-group form-group-sm"}
                           %div{:class=>"control-label col-sm-3"}
                              {{mpc.jsondata.name}}
                        %div{:class=>"form-group form-group-sm", "ng-repeat"=>"option in mpc.jsondataprice.product.options"}
                           %label{:class=>"control-label col-sm-3"}
                              {{option.opname}}
                           %div{:class=>"control-label col-sm-9"}
                              -# <tt>option = {{option.selectedValue}}</tt>
                              %select{:class=>'form-control input-sm', :id=>"selectid{{$index}}", "ng-change"=>"mpc.change(option.selectedValue, {{option.selectedValue}})", "ng-options"=>"selectval.description for selectval in option.selections track by selectval.code", "ng-model"=>"option.selectedValue"}
                        %div{:class=>"form-group form-group-sm"}
                           %div{:class=>"col-sm-9 col-sm-offset-3"}
                              %span{:id=>"prodString"}><
                                 Order Code: {{mpc.jsondataprice.product.name}}
                              %span{"ng-repeat"=>"option in mpc.jsondataprice.product.options"}><
                                 &#45;{{option.selectedValue.code}}
                           %div{:class=>"col-sm-9 col-sm-offset-3"}
                              %span{:id=>"prodPrice"}><
                                 List Price: {{mpc.jsondataprice.product.price}}
                  %div{:class=>"modal-footer"}
                     %button{:class=>"btn btn-primary", :type=>"button", "ng-click"=>"mpc.ok()"}OK
                     %button{:class=>"btn btn-warning", :type=>"button", "ng-click"=>"mpc.cancel()"}Cancel
                     %button{:class=>"btn btn-danger", :type=>"button", "ng-click"=>"mpc.reset()"}Reset
               %div{"ng-show"=>"mpc.jsonObjerror"}
                  %div{:class=>"modal-body"}
                     %div{:class=>"form-horizontal", :id=>"data"}
                        %div{:class=>"form-group form-group-sm"}
                           %div{:class=>"control-label col-sm-3"}
                              Error in retrieving data from server.
                  %div{:class=>"modal-footer"}
                     %button{:class=>"btn btn-warning", :type=>"button", "ng-click"=>"mpc.cancel()"}Cancel
         %div{:id=>"div2", :style=>"float:left;padding-top:10px;"}
            %div{:id=>"canvas-container", :style=>"height:800px;width:1000px;overflow:auto"}
               %canvas{:id=>"demoCanvas2", :width=>"1000", :height=>"1600"}
            %span.contextmenuholder
      %div{:id=>"versionspanel", :class=>"panel panel-success",:style=>"position:absolute;right:0;float:right;width:300px;display:none;margin-top:10px;overflow: auto"}
         %div{:id=>"versionpanelheader", :class=>"panel-heading panel-default"}
            Versions
            %button{:type=>"button", :class=>"close", "ng-click"=>'vm.toggle_versions_pane();'}
               %span &times;
               %span{:class=>"sr-only"} Close
         %div{:id=>"versionslist", :class=>"panel-body"}
            %p Previous Versions of Drawing, stored when changes made after 60mins of inactivity
         %table{:class=>"table table-bordered table-hover"}
            %thead
               %tr
                  %th Date and Time
               %tbody{:id=>"versionslisttab", :style=>"overflow-y: scroll;"}
                  %tr{"versions-directive"=>"vals", "company-id"=>"#{params[:company_id]}","drawing-id"=>"#{params[:id]}","user-id"=>"#{params[:user_id]}", "ng-repeat"=>"vals in #{@timestamps_readable}"}
=javascript_include_tag "app/angular.js"
=javascript_include_tag "app/ui-bootstrap-tpls-2.3.0.js"
=javascript_include_tag "app/angular-animate.js"
=javascript_include_tag "app/angular-resource.js"
=javascript_include_tag "app/angular-sanitize.js"
=javascript_include_tag "app/app.js", "data-turbolinks-track" => true
=javascript_include_tag "app/modalController.js", "data-turbolinks-track" => true
=javascript_include_tag "app/modalprodconfigController.js", "data-turbolinks-track" => true
=javascript_include_tag "app/iconDirective.js", "data-turbolinks-track" => true
=javascript_include_tag "app/backgroundbuttonDirective.js", "data-turbolinks-track" => true
=javascript_include_tag "app/iconTableDirective.js", "data-turbolinks-track" => true
=javascript_include_tag "app/versionsDirective.js", "data-turbolinks-track" => true
=javascript_include_tag "app/iconController.js", "data-turbolinks-track" => true
=javascript_include_tag "app/productService.js", "data-turbolinks-track" => true
=javascript_include_tag "app/contextmenuDirective.js", "data-turbolinks-track" => true
:javascript
   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
   })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

   ga('create', 'UA-76942309-1', 'auto');
   ga('send', 'pageview');

   function GetDebugParameter(sParam){
       log.info( "Entering  GetDebugParameter");
       var sPageURL = window.location.hash;
       log.debug("sPageURL:");
       log.debug( sPageURL);
       sPageURL = sPageURL.split("?");
       if (sPageURL.length > 1) {
          var sURLVariables = sPageURL[1].split('&');
          log.debug("sURLVariables:");
          log.debug( sURLVariables);
          for (var i = 0; i < sURLVariables.length; i++)
          {
             var sParameterName = sURLVariables[i].split('=');
             log.debug("sParameterName:")
             log.debug(sParameterName);
             if (sParameterName[0] == sParam)
             {
               log.debug("sParameterName[1]:")
               log.debug(sParameterName[1]);
               log.info( "Leaving GetDebugParameter");
               return sParameterName[1];
             }
          }
       } else {
         log.info( "Leaving GetDebugParameter returning false");
         return false;
       }
   };

   var handler = "";
   var c = new Array();
   var searchId;
   var objId_var = 0;
   var saveInProgress = false;
   var company_id ='#{params[:company_id]}'
   var user_id= '#{params[:user_id]}'
   var drawing_id = '#{params[:id]}'
   var dashed_line_png = '#{@dashed_line_png}'
   var modified = false
   var timestamps   = '#{@timestamps_readable}'
   var itemId = 0;
   var contextmenuon = false;
   var activeObject = false;
   var activeObjectVal = "";
   var activeObjectValCP = "";
   var backgroundImageVal = "";
   var objectName = "";
   var mpc_controller = "";
   var _curX, _curY;
   var canvas = new fabric.CanvasEx('demoCanvas2', {selection: true});
   fabric.Group.prototype.hasControls = false
   document.getElementById("demoCanvas2").fabric = canvas;
   var fabric = fabric || { version: "1.4.13" };
   var motionInbounds = true;
   var lineActive = true;
   var lineSelected = false;
   var log = log4javascript.getDefaultLogger();
   log4javascript.setEnabled(false);
   var debugOn = GetDebugParameter('debug');
   log4javascript.setEnabled(debugOn);
   log.setLevel(log4javascript.Level.TRACE);
   log.info("Executing javascript in edit.html");
   log.debug("Executing spinner");
   $(".spinner").show();
   canvas.backgroundColor="";
   log.debug("Load window twice, there is a bug in canvas/fabric that this addresses");
   if(!window.location.hash) {
       window.location = window.location + '#loaded';
       window.location.reload();
   }else{
       log.debug("Load Drawing");
       var data_drawing = "";
       if (parseInt("#{@drawing.drawing.length}") > 0) {
            log.debug("drawing loaded");
            data_drawing = #{ raw(@drawing.drawing) }
       } else {
            log.debug("no drawing loaded");
            data_drawing = ""
       }
       objId_var = 1;
       console.log("load objects onto canvas");
       loadCanvasDrawing(data_drawing)
       console.log("load background object onto canvas");
       var center = canvas.getCenter();
       log.info( "Drawing should be loaded ");
       log.info( "Fade spinner out ");
       $(".spinner").fadeOut( 400 );
   }

   log.info( "Loading all observers and listeners ");
   canvas.on('mouse:over', mouseOver);
   canvas.on('mouse:out', mouseOut);
   canvas.on('object:selected', objectSelected);
   canvas.on('mouse:up', function(e) { });
   canvas.on('mouse:down', mouseDown);
   canvas.on('selection:cleared', selectionCleared);
   canvas.on('object:scaling', objectResize);
   canvas.on("object:moving", objectBoundaryCheck);
   canvas.on("object:rotating", objectBoundaryCheck);
   canvas.on('object.modified', function(e) {console.log("object.modified: ",e)})
   canvas.on('custom-image:textChange', textChangedEvent);
   canvas.on('text:changed', textChangedEvent);
   canvas.on('object:removed', objectDeletedEvent);

   if (dragtest()) {
      // Browser supports HTML5 DnD.
      // Bind the event listeners for the image elements
      log.debug("Browser supports Drag N Drop")
      log.info( "Binding event listeners to images ");
      var images = document.querySelectorAll('#images img');

      // Bind the event listeners for the canvas
      var canvasContainer = document.getElementById('canvas-container');
      log.info( "Binding event listeners to canvas ");
      canvasContainer.addEventListener('dragenter', handleDragEnter, false);
      canvasContainer.addEventListener('dragover', handleDragOver, false);
      canvasContainer.addEventListener('dragleave', handleDragLeave, false);
      canvasContainer.addEventListener('drop', handleDrop, false);
   } else {
      window.location.href = '/companies/'+ company_id +'/users/' + user_id;
   }
   var md = new MobileDetect(window.navigator.userAgent);
   log.info( md.mobile() );          // 'Sony'
   log.info( md.mobileGrade() );
   log.info( md.phone() );           // 'Sony'
   log.info( md.tablet() );          // null
   log.info( md.userAgent() );       // 'Safari'
   log.info( md.os() );              // 'AndroidOS'
   log.info( md.is('iPhone') );      // false
   log.info( md.is('bot') );         // false
   log.info( md.version('Webkit') );         // 534.3
   log.info( md.versionStr('Build') );       // '4.1.A.0.562'
   log.info( md.match('playstation|xbox') ); // false
   if ( md.is('Windows Phone') || md.is('iemobile') || md.is('WPDesktop') || md.os() == 'AndroidOS' || md.is('iPhone') || md.is('iPad')) {
      log.info("Redirecting...")
      window.location.href = '/companies/'+ company_id +'/users/' + user_id;
   }
   log.info( "Done Demo_Industrial Javascript ");
   //console.log("Dashed Line: ", dashed_line_png)
